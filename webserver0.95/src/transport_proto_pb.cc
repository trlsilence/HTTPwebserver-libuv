// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transport_proto_pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace transport_proto {
class Transport_proto_CHeadDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CHead>
     _instance;
} _Transport_proto_CHead_default_instance_;
class Transport_proto_CBodyFront_GetCDNDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront_GetCDN>
     _instance;
} _Transport_proto_CBodyFront_GetCDN_default_instance_;
class Transport_proto_CBodyFront_AssignCDNDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront_AssignCDN>
     _instance;
} _Transport_proto_CBodyFront_AssignCDN_default_instance_;
class Transport_proto_CBodyFront_AssignCDNRepDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront_AssignCDNRep>
     _instance;
} _Transport_proto_CBodyFront_AssignCDNRep_default_instance_;
class Transport_proto_CBodyFront_AddMirrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront_AddMirror>
     _instance;
} _Transport_proto_CBodyFront_AddMirror_default_instance_;
class Transport_proto_CBodyFront_ReturnManagerIDtoCDNDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront_ReturnManagerIDtoCDN>
     _instance;
} _Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_;
class Transport_proto_CBodyFrontDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyFront>
     _instance;
} _Transport_proto_CBodyFront_default_instance_;
class Transport_proto_CBodyCDN_AssignCDNRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyCDN_AssignCDNRsp>
     _instance;
} _Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_;
class Transport_proto_CBodyCDN_StateInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyCDN_StateInfo>
     _instance;
} _Transport_proto_CBodyCDN_StateInfo_default_instance_;
class Transport_proto_CBodyCDN_FileInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyCDN_FileInfo>
     _instance;
} _Transport_proto_CBodyCDN_FileInfo_default_instance_;
class Transport_proto_CBodyCDN_CDNReportIPDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyCDN_CDNReportIP>
     _instance;
} _Transport_proto_CBodyCDN_CDNReportIP_default_instance_;
class Transport_proto_CBodyCDNDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyCDN>
     _instance;
} _Transport_proto_CBodyCDN_default_instance_;
class Transport_proto_CBodyBack_GetCDNRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_GetCDNRsp>
     _instance;
} _Transport_proto_CBodyBack_GetCDNRsp_default_instance_;
class Transport_proto_CBodyBack_GetCDNRspAnotherDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_GetCDNRspAnother>
     _instance;
} _Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_;
class Transport_proto_CBodyBack_AddMirrorRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_AddMirrorRsp>
     _instance;
} _Transport_proto_CBodyBack_AddMirrorRsp_default_instance_;
class Transport_proto_CBodyBack_DelFileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_DelFile>
     _instance;
} _Transport_proto_CBodyBack_DelFile_default_instance_;
class Transport_proto_CBodyBack_AddFileDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_AddFile>
     _instance;
} _Transport_proto_CBodyBack_AddFile_default_instance_;
class Transport_proto_CBodyBack_CDNFindSourceResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack_CDNFindSourceResult>
     _instance;
} _Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_;
class Transport_proto_CBodyBackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto_CBodyBack>
     _instance;
} _Transport_proto_CBodyBack_default_instance_;
class Transport_protoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Transport_proto>
     _instance;
} _Transport_proto_default_instance_;

namespace protobuf_transport_5fproto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, usertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, cmdtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, stateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CHead, rsptime_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_GetCDN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_GetCDN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_GetCDN, user_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_GetCDN, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDN, method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDN, user_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDN, managerid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDNRep, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDNRep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDNRep, cdnid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AssignCDNRep, requested_url_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AddMirror, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AddMirror, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AddMirror, domain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_AddMirror, en_ip_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_ReturnManagerIDtoCDN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_ReturnManagerIDtoCDN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_ReturnManagerIDtoCDN, managerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront_ReturnManagerIDtoCDN, cdnid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyFront, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_AssignCDNRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_AssignCDNRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_AssignCDNRsp, cdn_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_AssignCDNRsp, requested_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_AssignCDNRsp, managerid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ullmaxband_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ulluseband_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ulldcdnband_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ullmaxspace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ullusespace_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_uihealthdegree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, m_ilastkeepalivetime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, managerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_StateInfo, cdnid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_FileInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_FileInfo, fileinforep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_FileInfo, managerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_FileInfo, cdnid_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_CDNReportIP, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN_CDNReportIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyCDN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRsp, requested_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRsp, cdnhandler_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRspAnother, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRspAnother, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRspAnother, cdn_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_GetCDNRspAnother, userid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddMirrorRsp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddMirrorRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_DelFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_DelFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_DelFile, cdnhandler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_DelFile, delfilelist_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddFile, cdnhandler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_AddFile, addfilelist_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_CDNFindSourceResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_CDNFindSourceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_CDNFindSourceResult, userid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack_CDNFindSourceResult, redirecturl_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto_CBodyBack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transport_proto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(Transport_proto_CHead)},
  { 15, 22, sizeof(Transport_proto_CBodyFront_GetCDN)},
  { 24, 32, sizeof(Transport_proto_CBodyFront_AssignCDN)},
  { 35, 42, sizeof(Transport_proto_CBodyFront_AssignCDNRep)},
  { 44, 51, sizeof(Transport_proto_CBodyFront_AddMirror)},
  { 53, 60, sizeof(Transport_proto_CBodyFront_ReturnManagerIDtoCDN)},
  { 62, 67, sizeof(Transport_proto_CBodyFront)},
  { 67, 75, sizeof(Transport_proto_CBodyCDN_AssignCDNRsp)},
  { 78, 92, sizeof(Transport_proto_CBodyCDN_StateInfo)},
  { 101, 109, sizeof(Transport_proto_CBodyCDN_FileInfo)},
  { 112, 117, sizeof(Transport_proto_CBodyCDN_CDNReportIP)},
  { 117, 122, sizeof(Transport_proto_CBodyCDN)},
  { 122, 129, sizeof(Transport_proto_CBodyBack_GetCDNRsp)},
  { 131, 138, sizeof(Transport_proto_CBodyBack_GetCDNRspAnother)},
  { 140, 145, sizeof(Transport_proto_CBodyBack_AddMirrorRsp)},
  { 145, 152, sizeof(Transport_proto_CBodyBack_DelFile)},
  { 154, 161, sizeof(Transport_proto_CBodyBack_AddFile)},
  { 163, 170, sizeof(Transport_proto_CBodyBack_CDNFindSourceResult)},
  { 172, 177, sizeof(Transport_proto_CBodyBack)},
  { 177, 182, sizeof(Transport_proto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_GetCDN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_AssignCDN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_AssignCDNRep_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_AddMirror_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyFront_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyCDN_StateInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyCDN_FileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyCDN_CDNReportIP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyCDN_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_GetCDNRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_AddMirrorRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_DelFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_AddFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_CBodyBack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Transport_proto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "transport_proto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Transport_proto_CHead_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CHead_default_instance_);_Transport_proto_CBodyFront_GetCDN_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_GetCDN_default_instance_);_Transport_proto_CBodyFront_AssignCDN_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_AssignCDN_default_instance_);_Transport_proto_CBodyFront_AssignCDNRep_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_AssignCDNRep_default_instance_);_Transport_proto_CBodyFront_AddMirror_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_AddMirror_default_instance_);_Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_);_Transport_proto_CBodyFront_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyFront_default_instance_);_Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_);_Transport_proto_CBodyCDN_StateInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyCDN_StateInfo_default_instance_);_Transport_proto_CBodyCDN_FileInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyCDN_FileInfo_default_instance_);_Transport_proto_CBodyCDN_CDNReportIP_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyCDN_CDNReportIP_default_instance_);_Transport_proto_CBodyCDN_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyCDN_default_instance_);_Transport_proto_CBodyBack_GetCDNRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_GetCDNRsp_default_instance_);_Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_);_Transport_proto_CBodyBack_AddMirrorRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_AddMirrorRsp_default_instance_);_Transport_proto_CBodyBack_DelFile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_DelFile_default_instance_);_Transport_proto_CBodyBack_AddFile_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_AddFile_default_instance_);_Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_);_Transport_proto_CBodyBack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_CBodyBack_default_instance_);_Transport_proto_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Transport_proto_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025transport_proto.proto\022\017transport_proto"
      "\"\263\013\n\017Transport_proto\032\324\003\n\005CHead\022\017\n\007Versio"
      "n\030\001 \002(\002\022\020\n\010UserType\030\002 \002(\002\022\017\n\007CmdType\030\003 \002"
      "(\002\022\017\n\007StateID\030\004 \002(\002\022\017\n\007RspTime\030\005 \002(\002\"5\n\t"
      "User_Type\022\013\n\007General\020\000\022\016\n\nEnterprise\020\001\022\013"
      "\n\007CDNnode\020\002\"\374\001\n\010Cmd_Type\022\n\n\006GetCDN\020\000\022\r\n\t"
      "GetCDNRsp\020\001\022\r\n\tAssignCDN\020\002\022\020\n\014AssignCDNR"
      "sp\020\003\022\020\n\014AssignCDNRep\020\004\022\r\n\tAddMirror\020\005\022\020\n"
      "\014AddMirrorRsp\020\006\022\016\n\nCDNAddFile\020\007\022\016\n\nCDNDe"
      "lFile\020\010\022\017\n\013CDNStateRep\020\t\022\016\n\nCDNFileRep\020\n"
      "\022\026\n\022AssignCDNRsptoUser\020\013\022\027\n\023CDNFindSourc"
      "eResult\020\014\022\017\n\013CDNReportIP\020\r\"\?\n\010State_ID\022\t"
      "\n\005ReqOk\020d\022\016\n\nAddmirroOk\020o\022\t\n\005NoFee\020p\022\r\n\t"
      "FindConOk\020x\032\226\002\n\nCBodyFront\032*\n\006GetCDN\022\020\n\010"
      "User_URL\030\001 \002(\t\022\016\n\006UserID\030\002 \002(\t\032@\n\tAssign"
      "CDN\022\016\n\006method\030\001 \002(\t\022\020\n\010User_URL\030\002 \002(\t\022\021\n"
      "\tmanagerid\030\003 \002(\005\0324\n\014AssignCDNRep\022\r\n\005cdni"
      "d\030\001 \002(\005\022\025\n\rrequested_url\030\002 \002(\t\032*\n\tAddMir"
      "ror\022\016\n\006Domain\030\001 \002(\t\022\r\n\005En_IP\030\002 \002(\t\0328\n\024Re"
      "turnManagerIDtoCDN\022\021\n\tmanagerid\030\001 \002(\005\022\r\n"
      "\005cdnid\030\002 \002(\005\032\200\003\n\010CBodyCDN\032I\n\014AssignCDNRs"
      "p\022\017\n\007CDN_URL\030\001 \002(\t\022\025\n\rrequested_url\030\002 \002("
      "\t\022\021\n\tmanagerid\030\003 \002(\005\032\326\001\n\tStateInfo\022\024\n\014m_"
      "ullMaxBand\030\001 \002(\005\022\024\n\014m_ullUseBand\030\002 \002(\005\022\025"
      "\n\rm_ullDCDNBand\030\003 \002(\005\022\025\n\rm_ullMaxSpace\030\004"
      " \002(\005\022\025\n\rm_ullUseSpace\030\005 \002(\005\022\030\n\020m_uiHealt"
      "hDegree\030\006 \002(\005\022\034\n\024m_iLastKeepAliveTime\030\007 "
      "\002(\005\022\021\n\tmanagerid\030\010 \002(\005\022\r\n\005cdnid\030\t \002(\005\032A\n"
      "\010FileInfo\022\023\n\013FileinfoRep\030\001 \002(\t\022\021\n\tmanage"
      "rid\030\002 \002(\005\022\r\n\005cdnid\030\003 \002(\005\032\r\n\013CDNReportIP\032"
      "\254\002\n\tCBodyBack\0326\n\tGetCDNRsp\022\025\n\rrequested_"
      "url\030\001 \002(\t\022\022\n\ncdnhandler\030\002 \002(\005\0323\n\020GetCDNR"
      "spAnother\022\017\n\007CDN_URL\030\001 \002(\t\022\016\n\006UserID\030\002 \002"
      "(\t\032\016\n\014AddMirrorRsp\0322\n\007DelFile\022\022\n\ncdnhand"
      "ler\030\001 \002(\005\022\023\n\013DelFilelist\030\002 \002(\t\0322\n\007AddFil"
      "e\022\022\n\ncdnhandler\030\001 \002(\005\022\023\n\013AddFilelist\030\002 \002"
      "(\t\032:\n\023CDNFindSourceResult\022\016\n\006userid\030\001 \002("
      "\t\022\023\n\013redirecturl\030\002 \002(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1502);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transport_proto.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_transport_5fproto_2eproto

const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_User_Type_descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_enum_descriptors[0];
}
bool Transport_proto_CHead_User_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Transport_proto_CHead_User_Type Transport_proto_CHead::General;
const Transport_proto_CHead_User_Type Transport_proto_CHead::Enterprise;
const Transport_proto_CHead_User_Type Transport_proto_CHead::CDNnode;
const Transport_proto_CHead_User_Type Transport_proto_CHead::User_Type_MIN;
const Transport_proto_CHead_User_Type Transport_proto_CHead::User_Type_MAX;
const int Transport_proto_CHead::User_Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_Cmd_Type_descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_enum_descriptors[1];
}
bool Transport_proto_CHead_Cmd_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::GetCDN;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::GetCDNRsp;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AssignCDN;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AssignCDNRsp;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AssignCDNRep;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AddMirror;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AddMirrorRsp;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNAddFile;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNDelFile;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNStateRep;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNFileRep;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::AssignCDNRsptoUser;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNFindSourceResult;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::CDNReportIP;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::Cmd_Type_MIN;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead::Cmd_Type_MAX;
const int Transport_proto_CHead::Cmd_Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_State_ID_descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_enum_descriptors[2];
}
bool Transport_proto_CHead_State_ID_IsValid(int value) {
  switch (value) {
    case 100:
    case 111:
    case 112:
    case 120:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Transport_proto_CHead_State_ID Transport_proto_CHead::ReqOk;
const Transport_proto_CHead_State_ID Transport_proto_CHead::AddmirroOk;
const Transport_proto_CHead_State_ID Transport_proto_CHead::NoFee;
const Transport_proto_CHead_State_ID Transport_proto_CHead::FindConOk;
const Transport_proto_CHead_State_ID Transport_proto_CHead::State_ID_MIN;
const Transport_proto_CHead_State_ID Transport_proto_CHead::State_ID_MAX;
const int Transport_proto_CHead::State_ID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CHead::kVersionFieldNumber;
const int Transport_proto_CHead::kUserTypeFieldNumber;
const int Transport_proto_CHead::kCmdTypeFieldNumber;
const int Transport_proto_CHead::kStateIDFieldNumber;
const int Transport_proto_CHead::kRspTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CHead::Transport_proto_CHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CHead)
}
Transport_proto_CHead::Transport_proto_CHead(const Transport_proto_CHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsptime_) -
    reinterpret_cast<char*>(&version_)) + sizeof(rsptime_));
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CHead)
}

void Transport_proto_CHead::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsptime_) -
      reinterpret_cast<char*>(&version_)) + sizeof(rsptime_));
}

Transport_proto_CHead::~Transport_proto_CHead() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CHead)
  SharedDtor();
}

void Transport_proto_CHead::SharedDtor() {
}

void Transport_proto_CHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CHead::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CHead& Transport_proto_CHead::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CHead* Transport_proto_CHead::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CHead* n = new Transport_proto_CHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CHead::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rsptime_) -
        reinterpret_cast<char*>(&version_)) + sizeof(rsptime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float Version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float UserType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_usertype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &usertype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float CmdType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_cmdtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmdtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float StateID = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_stateid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stateid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float RspTime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_rsptime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rsptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CHead)
  return false;
#undef DO_
}

void Transport_proto_CHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->version(), output);
  }

  // required float UserType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->usertype(), output);
  }

  // required float CmdType = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cmdtype(), output);
  }

  // required float StateID = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->stateid(), output);
  }

  // required float RspTime = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rsptime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CHead)
}

::google::protobuf::uint8* Transport_proto_CHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float Version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->version(), target);
  }

  // required float UserType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->usertype(), target);
  }

  // required float CmdType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cmdtype(), target);
  }

  // required float StateID = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->stateid(), target);
  }

  // required float RspTime = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rsptime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CHead)
  return target;
}

size_t Transport_proto_CHead::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CHead)
  size_t total_size = 0;

  if (has_version()) {
    // required float Version = 1;
    total_size += 1 + 4;
  }

  if (has_usertype()) {
    // required float UserType = 2;
    total_size += 1 + 4;
  }

  if (has_cmdtype()) {
    // required float CmdType = 3;
    total_size += 1 + 4;
  }

  if (has_stateid()) {
    // required float StateID = 4;
    total_size += 1 + 4;
  }

  if (has_rsptime()) {
    // required float RspTime = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Transport_proto_CHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required float Version = 1;
    total_size += 1 + 4;

    // required float UserType = 2;
    total_size += 1 + 4;

    // required float CmdType = 3;
    total_size += 1 + 4;

    // required float StateID = 4;
    total_size += 1 + 4;

    // required float RspTime = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CHead)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CHead* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CHead)
    MergeFrom(*source);
  }
}

void Transport_proto_CHead::MergeFrom(const Transport_proto_CHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      usertype_ = from.usertype_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmdtype_ = from.cmdtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      stateid_ = from.stateid_;
    }
    if (cached_has_bits & 0x00000010u) {
      rsptime_ = from.rsptime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CHead::CopyFrom(const Transport_proto_CHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Transport_proto_CHead::Swap(Transport_proto_CHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CHead::InternalSwap(Transport_proto_CHead* other) {
  using std::swap;
  swap(version_, other->version_);
  swap(usertype_, other->usertype_);
  swap(cmdtype_, other->cmdtype_);
  swap(stateid_, other->stateid_);
  swap(rsptime_, other->rsptime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CHead::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CHead

// required float Version = 1;
bool Transport_proto_CHead::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CHead::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CHead::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CHead::clear_version() {
  version_ = 0;
  clear_has_version();
}
float Transport_proto_CHead::version() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.Version)
  return version_;
}
void Transport_proto_CHead::set_version(float value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.Version)
}

// required float UserType = 2;
bool Transport_proto_CHead::has_usertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CHead::set_has_usertype() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CHead::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CHead::clear_usertype() {
  usertype_ = 0;
  clear_has_usertype();
}
float Transport_proto_CHead::usertype() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.UserType)
  return usertype_;
}
void Transport_proto_CHead::set_usertype(float value) {
  set_has_usertype();
  usertype_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.UserType)
}

// required float CmdType = 3;
bool Transport_proto_CHead::has_cmdtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transport_proto_CHead::set_has_cmdtype() {
  _has_bits_[0] |= 0x00000004u;
}
void Transport_proto_CHead::clear_has_cmdtype() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transport_proto_CHead::clear_cmdtype() {
  cmdtype_ = 0;
  clear_has_cmdtype();
}
float Transport_proto_CHead::cmdtype() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.CmdType)
  return cmdtype_;
}
void Transport_proto_CHead::set_cmdtype(float value) {
  set_has_cmdtype();
  cmdtype_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.CmdType)
}

// required float StateID = 4;
bool Transport_proto_CHead::has_stateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transport_proto_CHead::set_has_stateid() {
  _has_bits_[0] |= 0x00000008u;
}
void Transport_proto_CHead::clear_has_stateid() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transport_proto_CHead::clear_stateid() {
  stateid_ = 0;
  clear_has_stateid();
}
float Transport_proto_CHead::stateid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.StateID)
  return stateid_;
}
void Transport_proto_CHead::set_stateid(float value) {
  set_has_stateid();
  stateid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.StateID)
}

// required float RspTime = 5;
bool Transport_proto_CHead::has_rsptime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transport_proto_CHead::set_has_rsptime() {
  _has_bits_[0] |= 0x00000010u;
}
void Transport_proto_CHead::clear_has_rsptime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transport_proto_CHead::clear_rsptime() {
  rsptime_ = 0;
  clear_has_rsptime();
}
float Transport_proto_CHead::rsptime() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.RspTime)
  return rsptime_;
}
void Transport_proto_CHead::set_rsptime(float value) {
  set_has_rsptime();
  rsptime_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.RspTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyFront_GetCDN::kUserURLFieldNumber;
const int Transport_proto_CBodyFront_GetCDN::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront_GetCDN::Transport_proto_CBodyFront_GetCDN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront.GetCDN)
}
Transport_proto_CBodyFront_GetCDN::Transport_proto_CBodyFront_GetCDN(const Transport_proto_CBodyFront_GetCDN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_url()) {
    user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
  }
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront.GetCDN)
}

void Transport_proto_CBodyFront_GetCDN::SharedCtor() {
  _cached_size_ = 0;
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transport_proto_CBodyFront_GetCDN::~Transport_proto_CBodyFront_GetCDN() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront.GetCDN)
  SharedDtor();
}

void Transport_proto_CBodyFront_GetCDN::SharedDtor() {
  user_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyFront_GetCDN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront_GetCDN::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront_GetCDN& Transport_proto_CBodyFront_GetCDN::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront_GetCDN* Transport_proto_CBodyFront_GetCDN::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront_GetCDN* n = new Transport_proto_CBodyFront_GetCDN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront_GetCDN::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!user_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront_GetCDN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string User_URL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_url().data(), static_cast<int>(this->user_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string UserID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.GetCDN.UserID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront.GetCDN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront.GetCDN)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront_GetCDN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string User_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_url(), output);
  }

  // required string UserID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.GetCDN.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront.GetCDN)
}

::google::protobuf::uint8* Transport_proto_CBodyFront_GetCDN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string User_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user_url(), target);
  }

  // required string UserID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.GetCDN.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront.GetCDN)
  return target;
}

size_t Transport_proto_CBodyFront_GetCDN::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  size_t total_size = 0;

  if (has_user_url()) {
    // required string User_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_url());
  }

  if (has_userid()) {
    // required string UserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  return total_size;
}
size_t Transport_proto_CBodyFront_GetCDN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string User_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_url());

    // required string UserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront_GetCDN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront_GetCDN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront_GetCDN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront.GetCDN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront.GetCDN)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront_GetCDN::MergeFrom(const Transport_proto_CBodyFront_GetCDN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_user_url();
      user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
}

void Transport_proto_CBodyFront_GetCDN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront_GetCDN::CopyFrom(const Transport_proto_CBodyFront_GetCDN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront.GetCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront_GetCDN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyFront_GetCDN::Swap(Transport_proto_CBodyFront_GetCDN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront_GetCDN::InternalSwap(Transport_proto_CBodyFront_GetCDN* other) {
  using std::swap;
  user_url_.Swap(&other->user_url_);
  userid_.Swap(&other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront_GetCDN::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront_GetCDN

// required string User_URL = 1;
bool Transport_proto_CBodyFront_GetCDN::has_user_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyFront_GetCDN::set_has_user_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyFront_GetCDN::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyFront_GetCDN::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
const ::std::string& Transport_proto_CBodyFront_GetCDN::user_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  return user_url_.GetNoArena();
}
void Transport_proto_CBodyFront_GetCDN::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_GetCDN::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
#endif
void Transport_proto_CBodyFront_GetCDN::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
void Transport_proto_CBodyFront_GetCDN::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
::std::string* Transport_proto_CBodyFront_GetCDN::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_GetCDN::release_user_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_GetCDN::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}

// required string UserID = 2;
bool Transport_proto_CBodyFront_GetCDN::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyFront_GetCDN::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyFront_GetCDN::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyFront_GetCDN::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& Transport_proto_CBodyFront_GetCDN::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  return userid_.GetNoArena();
}
void Transport_proto_CBodyFront_GetCDN::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_GetCDN::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
#endif
void Transport_proto_CBodyFront_GetCDN::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
void Transport_proto_CBodyFront_GetCDN::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
::std::string* Transport_proto_CBodyFront_GetCDN::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_GetCDN::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_GetCDN::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyFront_AssignCDN::kMethodFieldNumber;
const int Transport_proto_CBodyFront_AssignCDN::kUserURLFieldNumber;
const int Transport_proto_CBodyFront_AssignCDN::kManageridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront_AssignCDN::Transport_proto_CBodyFront_AssignCDN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront.AssignCDN)
}
Transport_proto_CBodyFront_AssignCDN::Transport_proto_CBodyFront_AssignCDN(const Transport_proto_CBodyFront_AssignCDN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_method()) {
    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_url()) {
    user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
  }
  managerid_ = from.managerid_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront.AssignCDN)
}

void Transport_proto_CBodyFront_AssignCDN::SharedCtor() {
  _cached_size_ = 0;
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  managerid_ = 0;
}

Transport_proto_CBodyFront_AssignCDN::~Transport_proto_CBodyFront_AssignCDN() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  SharedDtor();
}

void Transport_proto_CBodyFront_AssignCDN::SharedDtor() {
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyFront_AssignCDN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront_AssignCDN::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront_AssignCDN& Transport_proto_CBodyFront_AssignCDN::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront_AssignCDN* Transport_proto_CBodyFront_AssignCDN::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront_AssignCDN* n = new Transport_proto_CBodyFront_AssignCDN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront_AssignCDN::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!method_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*method_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!user_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*user_url_.UnsafeRawStringPointer())->clear();
    }
  }
  managerid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront_AssignCDN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), static_cast<int>(this->method().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.AssignCDN.method");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string User_URL = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user_url().data(), static_cast<int>(this->user_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 managerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_managerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &managerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront_AssignCDN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDN.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->method(), output);
  }

  // required string User_URL = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user_url(), output);
  }

  // required int32 managerid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->managerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront.AssignCDN)
}

::google::protobuf::uint8* Transport_proto_CBodyFront_AssignCDN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string method = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), static_cast<int>(this->method().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDN.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->method(), target);
  }

  // required string User_URL = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user_url().data(), static_cast<int>(this->user_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_url(), target);
  }

  // required int32 managerid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->managerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  return target;
}

size_t Transport_proto_CBodyFront_AssignCDN::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  size_t total_size = 0;

  if (has_method()) {
    // required string method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  if (has_user_url()) {
    // required string User_URL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_url());
  }

  if (has_managerid()) {
    // required int32 managerid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());
  }

  return total_size;
}
size_t Transport_proto_CBodyFront_AssignCDN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string method = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());

    // required string User_URL = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_url());

    // required int32 managerid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront_AssignCDN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront_AssignCDN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront_AssignCDN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront.AssignCDN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront.AssignCDN)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront_AssignCDN::MergeFrom(const Transport_proto_CBodyFront_AssignCDN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_url();
      user_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      managerid_ = from.managerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyFront_AssignCDN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront_AssignCDN::CopyFrom(const Transport_proto_CBodyFront_AssignCDN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront_AssignCDN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Transport_proto_CBodyFront_AssignCDN::Swap(Transport_proto_CBodyFront_AssignCDN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront_AssignCDN::InternalSwap(Transport_proto_CBodyFront_AssignCDN* other) {
  using std::swap;
  method_.Swap(&other->method_);
  user_url_.Swap(&other->user_url_);
  swap(managerid_, other->managerid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront_AssignCDN::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront_AssignCDN

// required string method = 1;
bool Transport_proto_CBodyFront_AssignCDN::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyFront_AssignCDN::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
const ::std::string& Transport_proto_CBodyFront_AssignCDN::method() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  return method_.GetNoArena();
}
void Transport_proto_CBodyFront_AssignCDN::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_AssignCDN::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
#endif
void Transport_proto_CBodyFront_AssignCDN::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
void Transport_proto_CBodyFront_AssignCDN::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
::std::string* Transport_proto_CBodyFront_AssignCDN::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_AssignCDN::release_method() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_AssignCDN::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}

// required string User_URL = 2;
bool Transport_proto_CBodyFront_AssignCDN::has_user_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyFront_AssignCDN::set_has_user_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
const ::std::string& Transport_proto_CBodyFront_AssignCDN::user_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  return user_url_.GetNoArena();
}
void Transport_proto_CBodyFront_AssignCDN::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_AssignCDN::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
#endif
void Transport_proto_CBodyFront_AssignCDN::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
void Transport_proto_CBodyFront_AssignCDN::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
::std::string* Transport_proto_CBodyFront_AssignCDN::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_AssignCDN::release_user_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_AssignCDN::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}

// required int32 managerid = 3;
bool Transport_proto_CBodyFront_AssignCDN::has_managerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transport_proto_CBodyFront_AssignCDN::set_has_managerid() {
  _has_bits_[0] |= 0x00000004u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transport_proto_CBodyFront_AssignCDN::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
::google::protobuf::int32 Transport_proto_CBodyFront_AssignCDN::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.managerid)
  return managerid_;
}
void Transport_proto_CBodyFront_AssignCDN::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.managerid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyFront_AssignCDNRep::kCdnidFieldNumber;
const int Transport_proto_CBodyFront_AssignCDNRep::kRequestedUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront_AssignCDNRep::Transport_proto_CBodyFront_AssignCDNRep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
}
Transport_proto_CBodyFront_AssignCDNRep::Transport_proto_CBodyFront_AssignCDNRep(const Transport_proto_CBodyFront_AssignCDNRep& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requested_url()) {
    requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
  }
  cdnid_ = from.cdnid_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
}

void Transport_proto_CBodyFront_AssignCDNRep::SharedCtor() {
  _cached_size_ = 0;
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnid_ = 0;
}

Transport_proto_CBodyFront_AssignCDNRep::~Transport_proto_CBodyFront_AssignCDNRep() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  SharedDtor();
}

void Transport_proto_CBodyFront_AssignCDNRep::SharedDtor() {
  requested_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyFront_AssignCDNRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront_AssignCDNRep::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront_AssignCDNRep& Transport_proto_CBodyFront_AssignCDNRep::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront_AssignCDNRep* Transport_proto_CBodyFront_AssignCDNRep::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront_AssignCDNRep* n = new Transport_proto_CBodyFront_AssignCDNRep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront_AssignCDNRep::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_requested_url()) {
    GOOGLE_DCHECK(!requested_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*requested_url_.UnsafeRawStringPointer())->clear();
  }
  cdnid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront_AssignCDNRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cdnid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cdnid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string requested_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requested_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requested_url().data(), static_cast<int>(this->requested_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront_AssignCDNRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cdnid(), output);
  }

  // required string requested_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requested_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
}

::google::protobuf::uint8* Transport_proto_CBodyFront_AssignCDNRep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cdnid(), target);
  }

  // required string requested_url = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requested_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  return target;
}

size_t Transport_proto_CBodyFront_AssignCDNRep::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  size_t total_size = 0;

  if (has_requested_url()) {
    // required string requested_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());
  }

  if (has_cdnid()) {
    // required int32 cdnid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());
  }

  return total_size;
}
size_t Transport_proto_CBodyFront_AssignCDNRep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string requested_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());

    // required int32 cdnid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront_AssignCDNRep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront_AssignCDNRep* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront_AssignCDNRep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront_AssignCDNRep::MergeFrom(const Transport_proto_CBodyFront_AssignCDNRep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_requested_url();
      requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      cdnid_ = from.cdnid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyFront_AssignCDNRep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront_AssignCDNRep::CopyFrom(const Transport_proto_CBodyFront_AssignCDNRep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront_AssignCDNRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyFront_AssignCDNRep::Swap(Transport_proto_CBodyFront_AssignCDNRep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront_AssignCDNRep::InternalSwap(Transport_proto_CBodyFront_AssignCDNRep* other) {
  using std::swap;
  requested_url_.Swap(&other->requested_url_);
  swap(cdnid_, other->cdnid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront_AssignCDNRep::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront_AssignCDNRep

// required int32 cdnid = 1;
bool Transport_proto_CBodyFront_AssignCDNRep::has_cdnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyFront_AssignCDNRep::set_has_cdnid() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyFront_AssignCDNRep::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyFront_AssignCDNRep::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
::google::protobuf::int32 Transport_proto_CBodyFront_AssignCDNRep::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.cdnid)
  return cdnid_;
}
void Transport_proto_CBodyFront_AssignCDNRep::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.cdnid)
}

// required string requested_url = 2;
bool Transport_proto_CBodyFront_AssignCDNRep::has_requested_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyFront_AssignCDNRep::set_has_requested_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyFront_AssignCDNRep::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyFront_AssignCDNRep::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
const ::std::string& Transport_proto_CBodyFront_AssignCDNRep::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  return requested_url_.GetNoArena();
}
void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
#endif
void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
::std::string* Transport_proto_CBodyFront_AssignCDNRep::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_AssignCDNRep::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_AssignCDNRep::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyFront_AddMirror::kDomainFieldNumber;
const int Transport_proto_CBodyFront_AddMirror::kEnIPFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront_AddMirror::Transport_proto_CBodyFront_AddMirror()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront.AddMirror)
}
Transport_proto_CBodyFront_AddMirror::Transport_proto_CBodyFront_AddMirror(const Transport_proto_CBodyFront_AddMirror& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_domain()) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  en_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_en_ip()) {
    en_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.en_ip_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront.AddMirror)
}

void Transport_proto_CBodyFront_AddMirror::SharedCtor() {
  _cached_size_ = 0;
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transport_proto_CBodyFront_AddMirror::~Transport_proto_CBodyFront_AddMirror() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront.AddMirror)
  SharedDtor();
}

void Transport_proto_CBodyFront_AddMirror::SharedDtor() {
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  en_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyFront_AddMirror::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront_AddMirror::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront_AddMirror& Transport_proto_CBodyFront_AddMirror::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront_AddMirror* Transport_proto_CBodyFront_AddMirror::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront_AddMirror* n = new Transport_proto_CBodyFront_AddMirror;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront_AddMirror::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!domain_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*domain_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!en_ip_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*en_ip_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront_AddMirror::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Domain = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->domain().data(), static_cast<int>(this->domain().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.AddMirror.Domain");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string En_IP = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_en_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->en_ip().data(), static_cast<int>(this->en_ip().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront.AddMirror)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront.AddMirror)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront_AddMirror::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AddMirror.Domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->domain(), output);
  }

  // required string En_IP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->en_ip().data(), static_cast<int>(this->en_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->en_ip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront.AddMirror)
}

::google::protobuf::uint8* Transport_proto_CBodyFront_AddMirror::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string Domain = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->domain().data(), static_cast<int>(this->domain().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AddMirror.Domain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // required string En_IP = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->en_ip().data(), static_cast<int>(this->en_ip().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->en_ip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront.AddMirror)
  return target;
}

size_t Transport_proto_CBodyFront_AddMirror::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  size_t total_size = 0;

  if (has_domain()) {
    // required string Domain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  if (has_en_ip()) {
    // required string En_IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->en_ip());
  }

  return total_size;
}
size_t Transport_proto_CBodyFront_AddMirror::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string Domain = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());

    // required string En_IP = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->en_ip());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront_AddMirror::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront_AddMirror* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront_AddMirror>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront.AddMirror)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront.AddMirror)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront_AddMirror::MergeFrom(const Transport_proto_CBodyFront_AddMirror& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_domain();
      domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_en_ip();
      en_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.en_ip_);
    }
  }
}

void Transport_proto_CBodyFront_AddMirror::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront_AddMirror::CopyFrom(const Transport_proto_CBodyFront_AddMirror& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront.AddMirror)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront_AddMirror::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyFront_AddMirror::Swap(Transport_proto_CBodyFront_AddMirror* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront_AddMirror::InternalSwap(Transport_proto_CBodyFront_AddMirror* other) {
  using std::swap;
  domain_.Swap(&other->domain_);
  en_ip_.Swap(&other->en_ip_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront_AddMirror::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront_AddMirror

// required string Domain = 1;
bool Transport_proto_CBodyFront_AddMirror::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyFront_AddMirror::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyFront_AddMirror::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyFront_AddMirror::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
const ::std::string& Transport_proto_CBodyFront_AddMirror::domain() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  return domain_.GetNoArena();
}
void Transport_proto_CBodyFront_AddMirror::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_AddMirror::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
#endif
void Transport_proto_CBodyFront_AddMirror::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
void Transport_proto_CBodyFront_AddMirror::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
::std::string* Transport_proto_CBodyFront_AddMirror::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_AddMirror::release_domain() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_AddMirror::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}

// required string En_IP = 2;
bool Transport_proto_CBodyFront_AddMirror::has_en_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyFront_AddMirror::set_has_en_ip() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyFront_AddMirror::clear_has_en_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyFront_AddMirror::clear_en_ip() {
  en_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_en_ip();
}
const ::std::string& Transport_proto_CBodyFront_AddMirror::en_ip() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  return en_ip_.GetNoArena();
}
void Transport_proto_CBodyFront_AddMirror::set_en_ip(const ::std::string& value) {
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
#if LANG_CXX11
void Transport_proto_CBodyFront_AddMirror::set_en_ip(::std::string&& value) {
  set_has_en_ip();
  en_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
#endif
void Transport_proto_CBodyFront_AddMirror::set_en_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
void Transport_proto_CBodyFront_AddMirror::set_en_ip(const char* value, size_t size) {
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
::std::string* Transport_proto_CBodyFront_AddMirror::mutable_en_ip() {
  set_has_en_ip();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  return en_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyFront_AddMirror::release_en_ip() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  clear_has_en_ip();
  return en_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyFront_AddMirror::set_allocated_en_ip(::std::string* en_ip) {
  if (en_ip != NULL) {
    set_has_en_ip();
  } else {
    clear_has_en_ip();
  }
  en_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_ip);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyFront_ReturnManagerIDtoCDN::kManageridFieldNumber;
const int Transport_proto_CBodyFront_ReturnManagerIDtoCDN::kCdnidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront_ReturnManagerIDtoCDN::Transport_proto_CBodyFront_ReturnManagerIDtoCDN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
}
Transport_proto_CBodyFront_ReturnManagerIDtoCDN::Transport_proto_CBodyFront_ReturnManagerIDtoCDN(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&managerid_, &from.managerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdnid_) -
    reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&managerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdnid_) -
      reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
}

Transport_proto_CBodyFront_ReturnManagerIDtoCDN::~Transport_proto_CBodyFront_ReturnManagerIDtoCDN() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  SharedDtor();
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::SharedDtor() {
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront_ReturnManagerIDtoCDN::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& Transport_proto_CBodyFront_ReturnManagerIDtoCDN::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront_ReturnManagerIDtoCDN* Transport_proto_CBodyFront_ReturnManagerIDtoCDN::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront_ReturnManagerIDtoCDN* n = new Transport_proto_CBodyFront_ReturnManagerIDtoCDN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&managerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cdnid_) -
        reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 managerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_managerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &managerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cdnid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cdnid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 managerid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->managerid(), output);
  }

  // required int32 cdnid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdnid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
}

::google::protobuf::uint8* Transport_proto_CBodyFront_ReturnManagerIDtoCDN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 managerid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->managerid(), target);
  }

  // required int32 cdnid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdnid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  return target;
}

size_t Transport_proto_CBodyFront_ReturnManagerIDtoCDN::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  size_t total_size = 0;

  if (has_managerid()) {
    // required int32 managerid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());
  }

  if (has_cdnid()) {
    // required int32 cdnid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());
  }

  return total_size;
}
size_t Transport_proto_CBodyFront_ReturnManagerIDtoCDN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 managerid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());

    // required int32 cdnid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront_ReturnManagerIDtoCDN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront_ReturnManagerIDtoCDN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::MergeFrom(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      managerid_ = from.managerid_;
    }
    if (cached_has_bits & 0x00000002u) {
      cdnid_ = from.cdnid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::CopyFrom(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::Swap(Transport_proto_CBodyFront_ReturnManagerIDtoCDN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::InternalSwap(Transport_proto_CBodyFront_ReturnManagerIDtoCDN* other) {
  using std::swap;
  swap(managerid_, other->managerid_);
  swap(cdnid_, other->cdnid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront_ReturnManagerIDtoCDN::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront_ReturnManagerIDtoCDN

// required int32 managerid = 1;
bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::has_managerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_has_managerid() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
::google::protobuf::int32 Transport_proto_CBodyFront_ReturnManagerIDtoCDN::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.managerid)
  return managerid_;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.managerid)
}

// required int32 cdnid = 2;
bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::has_cdnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_has_cdnid() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
::google::protobuf::int32 Transport_proto_CBodyFront_ReturnManagerIDtoCDN::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.cdnid)
  return cdnid_;
}
void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.cdnid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyFront::Transport_proto_CBodyFront()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyFront)
}
Transport_proto_CBodyFront::Transport_proto_CBodyFront(const Transport_proto_CBodyFront& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyFront)
}

void Transport_proto_CBodyFront::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto_CBodyFront::~Transport_proto_CBodyFront() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyFront)
  SharedDtor();
}

void Transport_proto_CBodyFront::SharedDtor() {
}

void Transport_proto_CBodyFront::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyFront::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyFront& Transport_proto_CBodyFront::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyFront* Transport_proto_CBodyFront::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyFront* n = new Transport_proto_CBodyFront;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyFront::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyFront::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyFront)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyFront)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyFront)
  return false;
#undef DO_
}

void Transport_proto_CBodyFront::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyFront)
}

::google::protobuf::uint8* Transport_proto_CBodyFront::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyFront)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyFront)
  return target;
}

size_t Transport_proto_CBodyFront::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyFront)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyFront::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyFront)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyFront* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyFront>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyFront)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyFront)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyFront::MergeFrom(const Transport_proto_CBodyFront& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyFront)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto_CBodyFront::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyFront::CopyFrom(const Transport_proto_CBodyFront& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyFront)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyFront::IsInitialized() const {
  return true;
}

void Transport_proto_CBodyFront::Swap(Transport_proto_CBodyFront* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyFront::InternalSwap(Transport_proto_CBodyFront* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyFront::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyFront

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyCDN_AssignCDNRsp::kCDNURLFieldNumber;
const int Transport_proto_CBodyCDN_AssignCDNRsp::kRequestedUrlFieldNumber;
const int Transport_proto_CBodyCDN_AssignCDNRsp::kManageridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyCDN_AssignCDNRsp::Transport_proto_CBodyCDN_AssignCDNRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
}
Transport_proto_CBodyCDN_AssignCDNRsp::Transport_proto_CBodyCDN_AssignCDNRsp(const Transport_proto_CBodyCDN_AssignCDNRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cdn_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdn_url()) {
    cdn_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdn_url_);
  }
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requested_url()) {
    requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
  }
  managerid_ = from.managerid_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
}

void Transport_proto_CBodyCDN_AssignCDNRsp::SharedCtor() {
  _cached_size_ = 0;
  cdn_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  managerid_ = 0;
}

Transport_proto_CBodyCDN_AssignCDNRsp::~Transport_proto_CBodyCDN_AssignCDNRsp() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  SharedDtor();
}

void Transport_proto_CBodyCDN_AssignCDNRsp::SharedDtor() {
  cdn_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requested_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyCDN_AssignCDNRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyCDN_AssignCDNRsp::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyCDN_AssignCDNRsp& Transport_proto_CBodyCDN_AssignCDNRsp::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyCDN_AssignCDNRsp* Transport_proto_CBodyCDN_AssignCDNRsp::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyCDN_AssignCDNRsp* n = new Transport_proto_CBodyCDN_AssignCDNRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyCDN_AssignCDNRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!cdn_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdn_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!requested_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*requested_url_.UnsafeRawStringPointer())->clear();
    }
  }
  managerid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyCDN_AssignCDNRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CDN_URL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdn_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string requested_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requested_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requested_url().data(), static_cast<int>(this->requested_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 managerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_managerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &managerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  return false;
#undef DO_
}

void Transport_proto_CBodyCDN_AssignCDNRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CDN_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdn_url(), output);
  }

  // required string requested_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requested_url(), output);
  }

  // required int32 managerid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->managerid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
}

::google::protobuf::uint8* Transport_proto_CBodyCDN_AssignCDNRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CDN_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdn_url(), target);
  }

  // required string requested_url = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requested_url(), target);
  }

  // required int32 managerid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->managerid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  return target;
}

size_t Transport_proto_CBodyCDN_AssignCDNRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  size_t total_size = 0;

  if (has_cdn_url()) {
    // required string CDN_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdn_url());
  }

  if (has_requested_url()) {
    // required string requested_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());
  }

  if (has_managerid()) {
    // required int32 managerid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());
  }

  return total_size;
}
size_t Transport_proto_CBodyCDN_AssignCDNRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string CDN_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdn_url());

    // required string requested_url = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());

    // required int32 managerid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyCDN_AssignCDNRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyCDN_AssignCDNRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyCDN_AssignCDNRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyCDN_AssignCDNRsp::MergeFrom(const Transport_proto_CBodyCDN_AssignCDNRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cdn_url();
      cdn_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdn_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_requested_url();
      requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      managerid_ = from.managerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyCDN_AssignCDNRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyCDN_AssignCDNRsp::CopyFrom(const Transport_proto_CBodyCDN_AssignCDNRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyCDN_AssignCDNRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Transport_proto_CBodyCDN_AssignCDNRsp::Swap(Transport_proto_CBodyCDN_AssignCDNRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyCDN_AssignCDNRsp::InternalSwap(Transport_proto_CBodyCDN_AssignCDNRsp* other) {
  using std::swap;
  cdn_url_.Swap(&other->cdn_url_);
  requested_url_.Swap(&other->requested_url_);
  swap(managerid_, other->managerid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyCDN_AssignCDNRsp::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyCDN_AssignCDNRsp

// required string CDN_URL = 1;
bool Transport_proto_CBodyCDN_AssignCDNRsp::has_cdn_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_cdn_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_cdn_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_cdn_url() {
  cdn_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdn_url();
}
const ::std::string& Transport_proto_CBodyCDN_AssignCDNRsp::cdn_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  return cdn_url_.GetNoArena();
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const ::std::string& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
#if LANG_CXX11
void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(::std::string&& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
#endif
void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const char* value, size_t size) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::mutable_cdn_url() {
  set_has_cdn_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  return cdn_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::release_cdn_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  clear_has_cdn_url();
  return cdn_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_allocated_cdn_url(::std::string* cdn_url) {
  if (cdn_url != NULL) {
    set_has_cdn_url();
  } else {
    clear_has_cdn_url();
  }
  cdn_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdn_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}

// required string requested_url = 2;
bool Transport_proto_CBodyCDN_AssignCDNRsp::has_requested_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_requested_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
const ::std::string& Transport_proto_CBodyCDN_AssignCDNRsp::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  return requested_url_.GetNoArena();
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
#if LANG_CXX11
void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
#endif
void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}

// required int32 managerid = 3;
bool Transport_proto_CBodyCDN_AssignCDNRsp::has_managerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_managerid() {
  _has_bits_[0] |= 0x00000004u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_AssignCDNRsp::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.managerid)
  return managerid_;
}
void Transport_proto_CBodyCDN_AssignCDNRsp::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.managerid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyCDN_StateInfo::kMUllMaxBandFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMUllUseBandFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMUllDCDNBandFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMUllMaxSpaceFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMUllUseSpaceFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMUiHealthDegreeFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kMILastKeepAliveTimeFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kManageridFieldNumber;
const int Transport_proto_CBodyCDN_StateInfo::kCdnidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyCDN_StateInfo::Transport_proto_CBodyCDN_StateInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyCDN.StateInfo)
}
Transport_proto_CBodyCDN_StateInfo::Transport_proto_CBodyCDN_StateInfo(const Transport_proto_CBodyCDN_StateInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_ullmaxband_, &from.m_ullmaxband_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdnid_) -
    reinterpret_cast<char*>(&m_ullmaxband_)) + sizeof(cdnid_));
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyCDN.StateInfo)
}

void Transport_proto_CBodyCDN_StateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&m_ullmaxband_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdnid_) -
      reinterpret_cast<char*>(&m_ullmaxband_)) + sizeof(cdnid_));
}

Transport_proto_CBodyCDN_StateInfo::~Transport_proto_CBodyCDN_StateInfo() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  SharedDtor();
}

void Transport_proto_CBodyCDN_StateInfo::SharedDtor() {
}

void Transport_proto_CBodyCDN_StateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyCDN_StateInfo::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyCDN_StateInfo& Transport_proto_CBodyCDN_StateInfo::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyCDN_StateInfo* Transport_proto_CBodyCDN_StateInfo::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyCDN_StateInfo* n = new Transport_proto_CBodyCDN_StateInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyCDN_StateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&m_ullmaxband_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&managerid_) -
        reinterpret_cast<char*>(&m_ullmaxband_)) + sizeof(managerid_));
  }
  cdnid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyCDN_StateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m_ullMaxBand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_m_ullmaxband();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ullmaxband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_ullUseBand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_m_ulluseband();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ulluseband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_ullDCDNBand = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_m_ulldcdnband();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ulldcdnband_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_ullMaxSpace = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_m_ullmaxspace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ullmaxspace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_ullUseSpace = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_m_ullusespace();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ullusespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_uiHealthDegree = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_m_uihealthdegree();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uihealthdegree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 m_iLastKeepAliveTime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_m_ilastkeepalivetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ilastkeepalivetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 managerid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_managerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &managerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cdnid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_cdnid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  return false;
#undef DO_
}

void Transport_proto_CBodyCDN_StateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 m_ullMaxBand = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_ullmaxband(), output);
  }

  // required int32 m_ullUseBand = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_ulluseband(), output);
  }

  // required int32 m_ullDCDNBand = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ulldcdnband(), output);
  }

  // required int32 m_ullMaxSpace = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ullmaxspace(), output);
  }

  // required int32 m_ullUseSpace = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ullusespace(), output);
  }

  // required int32 m_uiHealthDegree = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_uihealthdegree(), output);
  }

  // required int32 m_iLastKeepAliveTime = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_ilastkeepalivetime(), output);
  }

  // required int32 managerid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->managerid(), output);
  }

  // required int32 cdnid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cdnid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyCDN.StateInfo)
}

::google::protobuf::uint8* Transport_proto_CBodyCDN_StateInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 m_ullMaxBand = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_ullmaxband(), target);
  }

  // required int32 m_ullUseBand = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_ulluseband(), target);
  }

  // required int32 m_ullDCDNBand = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ulldcdnband(), target);
  }

  // required int32 m_ullMaxSpace = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_ullmaxspace(), target);
  }

  // required int32 m_ullUseSpace = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ullusespace(), target);
  }

  // required int32 m_uiHealthDegree = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_uihealthdegree(), target);
  }

  // required int32 m_iLastKeepAliveTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_ilastkeepalivetime(), target);
  }

  // required int32 managerid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->managerid(), target);
  }

  // required int32 cdnid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cdnid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  return target;
}

size_t Transport_proto_CBodyCDN_StateInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  size_t total_size = 0;

  if (has_m_ullmaxband()) {
    // required int32 m_ullMaxBand = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullmaxband());
  }

  if (has_m_ulluseband()) {
    // required int32 m_ullUseBand = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ulluseband());
  }

  if (has_m_ulldcdnband()) {
    // required int32 m_ullDCDNBand = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ulldcdnband());
  }

  if (has_m_ullmaxspace()) {
    // required int32 m_ullMaxSpace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullmaxspace());
  }

  if (has_m_ullusespace()) {
    // required int32 m_ullUseSpace = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullusespace());
  }

  if (has_m_uihealthdegree()) {
    // required int32 m_uiHealthDegree = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_uihealthdegree());
  }

  if (has_m_ilastkeepalivetime()) {
    // required int32 m_iLastKeepAliveTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ilastkeepalivetime());
  }

  if (has_managerid()) {
    // required int32 managerid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());
  }

  if (has_cdnid()) {
    // required int32 cdnid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());
  }

  return total_size;
}
size_t Transport_proto_CBodyCDN_StateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required int32 m_ullMaxBand = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullmaxband());

    // required int32 m_ullUseBand = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ulluseband());

    // required int32 m_ullDCDNBand = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ulldcdnband());

    // required int32 m_ullMaxSpace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullmaxspace());

    // required int32 m_ullUseSpace = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ullusespace());

    // required int32 m_uiHealthDegree = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_uihealthdegree());

    // required int32 m_iLastKeepAliveTime = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->m_ilastkeepalivetime());

    // required int32 managerid = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());

    // required int32 cdnid = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyCDN_StateInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyCDN_StateInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyCDN_StateInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyCDN.StateInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyCDN.StateInfo)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyCDN_StateInfo::MergeFrom(const Transport_proto_CBodyCDN_StateInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      m_ullmaxband_ = from.m_ullmaxband_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_ulluseband_ = from.m_ulluseband_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_ulldcdnband_ = from.m_ulldcdnband_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_ullmaxspace_ = from.m_ullmaxspace_;
    }
    if (cached_has_bits & 0x00000010u) {
      m_ullusespace_ = from.m_ullusespace_;
    }
    if (cached_has_bits & 0x00000020u) {
      m_uihealthdegree_ = from.m_uihealthdegree_;
    }
    if (cached_has_bits & 0x00000040u) {
      m_ilastkeepalivetime_ = from.m_ilastkeepalivetime_;
    }
    if (cached_has_bits & 0x00000080u) {
      managerid_ = from.managerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_cdnid(from.cdnid());
  }
}

void Transport_proto_CBodyCDN_StateInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyCDN_StateInfo::CopyFrom(const Transport_proto_CBodyCDN_StateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyCDN.StateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyCDN_StateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  return true;
}

void Transport_proto_CBodyCDN_StateInfo::Swap(Transport_proto_CBodyCDN_StateInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyCDN_StateInfo::InternalSwap(Transport_proto_CBodyCDN_StateInfo* other) {
  using std::swap;
  swap(m_ullmaxband_, other->m_ullmaxband_);
  swap(m_ulluseband_, other->m_ulluseband_);
  swap(m_ulldcdnband_, other->m_ulldcdnband_);
  swap(m_ullmaxspace_, other->m_ullmaxspace_);
  swap(m_ullusespace_, other->m_ullusespace_);
  swap(m_uihealthdegree_, other->m_uihealthdegree_);
  swap(m_ilastkeepalivetime_, other->m_ilastkeepalivetime_);
  swap(managerid_, other->managerid_);
  swap(cdnid_, other->cdnid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyCDN_StateInfo::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyCDN_StateInfo

// required int32 m_ullMaxBand = 1;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ullmaxband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullmaxband() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullmaxband() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ullmaxband() {
  m_ullmaxband_ = 0;
  clear_has_m_ullmaxband();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullmaxband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxBand)
  return m_ullmaxband_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ullmaxband(::google::protobuf::int32 value) {
  set_has_m_ullmaxband();
  m_ullmaxband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxBand)
}

// required int32 m_ullUseBand = 2;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ulluseband() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ulluseband() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ulluseband() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ulluseband() {
  m_ulluseband_ = 0;
  clear_has_m_ulluseband();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ulluseband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseBand)
  return m_ulluseband_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ulluseband(::google::protobuf::int32 value) {
  set_has_m_ulluseband();
  m_ulluseband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseBand)
}

// required int32 m_ullDCDNBand = 3;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ulldcdnband() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ulldcdnband() {
  _has_bits_[0] |= 0x00000004u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ulldcdnband() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ulldcdnband() {
  m_ulldcdnband_ = 0;
  clear_has_m_ulldcdnband();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ulldcdnband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullDCDNBand)
  return m_ulldcdnband_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ulldcdnband(::google::protobuf::int32 value) {
  set_has_m_ulldcdnband();
  m_ulldcdnband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullDCDNBand)
}

// required int32 m_ullMaxSpace = 4;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ullmaxspace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullmaxspace() {
  _has_bits_[0] |= 0x00000008u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullmaxspace() {
  _has_bits_[0] &= ~0x00000008u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ullmaxspace() {
  m_ullmaxspace_ = 0;
  clear_has_m_ullmaxspace();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullmaxspace() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxSpace)
  return m_ullmaxspace_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ullmaxspace(::google::protobuf::int32 value) {
  set_has_m_ullmaxspace();
  m_ullmaxspace_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxSpace)
}

// required int32 m_ullUseSpace = 5;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ullusespace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullusespace() {
  _has_bits_[0] |= 0x00000010u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullusespace() {
  _has_bits_[0] &= ~0x00000010u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ullusespace() {
  m_ullusespace_ = 0;
  clear_has_m_ullusespace();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullusespace() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseSpace)
  return m_ullusespace_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ullusespace(::google::protobuf::int32 value) {
  set_has_m_ullusespace();
  m_ullusespace_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseSpace)
}

// required int32 m_uiHealthDegree = 6;
bool Transport_proto_CBodyCDN_StateInfo::has_m_uihealthdegree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_uihealthdegree() {
  _has_bits_[0] |= 0x00000020u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_uihealthdegree() {
  _has_bits_[0] &= ~0x00000020u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_uihealthdegree() {
  m_uihealthdegree_ = 0;
  clear_has_m_uihealthdegree();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_uihealthdegree() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_uiHealthDegree)
  return m_uihealthdegree_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_uihealthdegree(::google::protobuf::int32 value) {
  set_has_m_uihealthdegree();
  m_uihealthdegree_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_uiHealthDegree)
}

// required int32 m_iLastKeepAliveTime = 7;
bool Transport_proto_CBodyCDN_StateInfo::has_m_ilastkeepalivetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_m_ilastkeepalivetime() {
  _has_bits_[0] |= 0x00000040u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ilastkeepalivetime() {
  _has_bits_[0] &= ~0x00000040u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_m_ilastkeepalivetime() {
  m_ilastkeepalivetime_ = 0;
  clear_has_m_ilastkeepalivetime();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ilastkeepalivetime() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_iLastKeepAliveTime)
  return m_ilastkeepalivetime_;
}
void Transport_proto_CBodyCDN_StateInfo::set_m_ilastkeepalivetime(::google::protobuf::int32 value) {
  set_has_m_ilastkeepalivetime();
  m_ilastkeepalivetime_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_iLastKeepAliveTime)
}

// required int32 managerid = 8;
bool Transport_proto_CBodyCDN_StateInfo::has_managerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_managerid() {
  _has_bits_[0] |= 0x00000080u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.managerid)
  return managerid_;
}
void Transport_proto_CBodyCDN_StateInfo::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.managerid)
}

// required int32 cdnid = 9;
bool Transport_proto_CBodyCDN_StateInfo::has_cdnid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Transport_proto_CBodyCDN_StateInfo::set_has_cdnid() {
  _has_bits_[0] |= 0x00000100u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Transport_proto_CBodyCDN_StateInfo::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.cdnid)
  return cdnid_;
}
void Transport_proto_CBodyCDN_StateInfo::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.cdnid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyCDN_FileInfo::kFileinfoRepFieldNumber;
const int Transport_proto_CBodyCDN_FileInfo::kManageridFieldNumber;
const int Transport_proto_CBodyCDN_FileInfo::kCdnidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyCDN_FileInfo::Transport_proto_CBodyCDN_FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyCDN.FileInfo)
}
Transport_proto_CBodyCDN_FileInfo::Transport_proto_CBodyCDN_FileInfo(const Transport_proto_CBodyCDN_FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fileinforep_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fileinforep()) {
    fileinforep_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileinforep_);
  }
  ::memcpy(&managerid_, &from.managerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdnid_) -
    reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyCDN.FileInfo)
}

void Transport_proto_CBodyCDN_FileInfo::SharedCtor() {
  _cached_size_ = 0;
  fileinforep_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&managerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cdnid_) -
      reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
}

Transport_proto_CBodyCDN_FileInfo::~Transport_proto_CBodyCDN_FileInfo() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  SharedDtor();
}

void Transport_proto_CBodyCDN_FileInfo::SharedDtor() {
  fileinforep_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyCDN_FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyCDN_FileInfo::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyCDN_FileInfo& Transport_proto_CBodyCDN_FileInfo::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyCDN_FileInfo* Transport_proto_CBodyCDN_FileInfo::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyCDN_FileInfo* n = new Transport_proto_CBodyCDN_FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyCDN_FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_fileinforep()) {
    GOOGLE_DCHECK(!fileinforep_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*fileinforep_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&managerid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cdnid_) -
        reinterpret_cast<char*>(&managerid_)) + sizeof(cdnid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyCDN_FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string FileinfoRep = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileinforep()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileinforep().data(), static_cast<int>(this->fileinforep().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 managerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_managerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &managerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cdnid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cdnid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  return false;
#undef DO_
}

void Transport_proto_CBodyCDN_FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string FileinfoRep = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileinforep().data(), static_cast<int>(this->fileinforep().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fileinforep(), output);
  }

  // required int32 managerid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->managerid(), output);
  }

  // required int32 cdnid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cdnid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyCDN.FileInfo)
}

::google::protobuf::uint8* Transport_proto_CBodyCDN_FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string FileinfoRep = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileinforep().data(), static_cast<int>(this->fileinforep().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileinforep(), target);
  }

  // required int32 managerid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->managerid(), target);
  }

  // required int32 cdnid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cdnid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  return target;
}

size_t Transport_proto_CBodyCDN_FileInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  size_t total_size = 0;

  if (has_fileinforep()) {
    // required string FileinfoRep = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fileinforep());
  }

  if (has_managerid()) {
    // required int32 managerid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());
  }

  if (has_cdnid()) {
    // required int32 cdnid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());
  }

  return total_size;
}
size_t Transport_proto_CBodyCDN_FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string FileinfoRep = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fileinforep());

    // required int32 managerid = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->managerid());

    // required int32 cdnid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyCDN_FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyCDN_FileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyCDN_FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyCDN.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyCDN.FileInfo)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyCDN_FileInfo::MergeFrom(const Transport_proto_CBodyCDN_FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_fileinforep();
      fileinforep_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fileinforep_);
    }
    if (cached_has_bits & 0x00000002u) {
      managerid_ = from.managerid_;
    }
    if (cached_has_bits & 0x00000004u) {
      cdnid_ = from.cdnid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyCDN_FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyCDN_FileInfo::CopyFrom(const Transport_proto_CBodyCDN_FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyCDN.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyCDN_FileInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Transport_proto_CBodyCDN_FileInfo::Swap(Transport_proto_CBodyCDN_FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyCDN_FileInfo::InternalSwap(Transport_proto_CBodyCDN_FileInfo* other) {
  using std::swap;
  fileinforep_.Swap(&other->fileinforep_);
  swap(managerid_, other->managerid_);
  swap(cdnid_, other->cdnid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyCDN_FileInfo::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyCDN_FileInfo

// required string FileinfoRep = 1;
bool Transport_proto_CBodyCDN_FileInfo::has_fileinforep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyCDN_FileInfo::set_has_fileinforep() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_has_fileinforep() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_fileinforep() {
  fileinforep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileinforep();
}
const ::std::string& Transport_proto_CBodyCDN_FileInfo::fileinforep() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  return fileinforep_.GetNoArena();
}
void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const ::std::string& value) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
#if LANG_CXX11
void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(::std::string&& value) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
#endif
void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const char* value, size_t size) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
::std::string* Transport_proto_CBodyCDN_FileInfo::mutable_fileinforep() {
  set_has_fileinforep();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  return fileinforep_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyCDN_FileInfo::release_fileinforep() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  clear_has_fileinforep();
  return fileinforep_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyCDN_FileInfo::set_allocated_fileinforep(::std::string* fileinforep) {
  if (fileinforep != NULL) {
    set_has_fileinforep();
  } else {
    clear_has_fileinforep();
  }
  fileinforep_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileinforep);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}

// required int32 managerid = 2;
bool Transport_proto_CBodyCDN_FileInfo::has_managerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyCDN_FileInfo::set_has_managerid() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_FileInfo::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.managerid)
  return managerid_;
}
void Transport_proto_CBodyCDN_FileInfo::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.managerid)
}

// required int32 cdnid = 3;
bool Transport_proto_CBodyCDN_FileInfo::has_cdnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Transport_proto_CBodyCDN_FileInfo::set_has_cdnid() {
  _has_bits_[0] |= 0x00000004u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000004u;
}
void Transport_proto_CBodyCDN_FileInfo::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
::google::protobuf::int32 Transport_proto_CBodyCDN_FileInfo::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.cdnid)
  return cdnid_;
}
void Transport_proto_CBodyCDN_FileInfo::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.cdnid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyCDN_CDNReportIP::Transport_proto_CBodyCDN_CDNReportIP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
}
Transport_proto_CBodyCDN_CDNReportIP::Transport_proto_CBodyCDN_CDNReportIP(const Transport_proto_CBodyCDN_CDNReportIP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
}

void Transport_proto_CBodyCDN_CDNReportIP::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto_CBodyCDN_CDNReportIP::~Transport_proto_CBodyCDN_CDNReportIP() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  SharedDtor();
}

void Transport_proto_CBodyCDN_CDNReportIP::SharedDtor() {
}

void Transport_proto_CBodyCDN_CDNReportIP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyCDN_CDNReportIP::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyCDN_CDNReportIP& Transport_proto_CBodyCDN_CDNReportIP::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyCDN_CDNReportIP* Transport_proto_CBodyCDN_CDNReportIP::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyCDN_CDNReportIP* n = new Transport_proto_CBodyCDN_CDNReportIP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyCDN_CDNReportIP::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyCDN_CDNReportIP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  return false;
#undef DO_
}

void Transport_proto_CBodyCDN_CDNReportIP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
}

::google::protobuf::uint8* Transport_proto_CBodyCDN_CDNReportIP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  return target;
}

size_t Transport_proto_CBodyCDN_CDNReportIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyCDN_CDNReportIP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyCDN_CDNReportIP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyCDN_CDNReportIP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyCDN_CDNReportIP::MergeFrom(const Transport_proto_CBodyCDN_CDNReportIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto_CBodyCDN_CDNReportIP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyCDN_CDNReportIP::CopyFrom(const Transport_proto_CBodyCDN_CDNReportIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyCDN_CDNReportIP::IsInitialized() const {
  return true;
}

void Transport_proto_CBodyCDN_CDNReportIP::Swap(Transport_proto_CBodyCDN_CDNReportIP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyCDN_CDNReportIP::InternalSwap(Transport_proto_CBodyCDN_CDNReportIP* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyCDN_CDNReportIP::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyCDN_CDNReportIP

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyCDN::Transport_proto_CBodyCDN()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyCDN)
}
Transport_proto_CBodyCDN::Transport_proto_CBodyCDN(const Transport_proto_CBodyCDN& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyCDN)
}

void Transport_proto_CBodyCDN::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto_CBodyCDN::~Transport_proto_CBodyCDN() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyCDN)
  SharedDtor();
}

void Transport_proto_CBodyCDN::SharedDtor() {
}

void Transport_proto_CBodyCDN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyCDN::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyCDN& Transport_proto_CBodyCDN::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyCDN* Transport_proto_CBodyCDN::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyCDN* n = new Transport_proto_CBodyCDN;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyCDN::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyCDN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyCDN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyCDN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyCDN)
  return false;
#undef DO_
}

void Transport_proto_CBodyCDN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyCDN)
}

::google::protobuf::uint8* Transport_proto_CBodyCDN::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyCDN)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyCDN)
  return target;
}

size_t Transport_proto_CBodyCDN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyCDN)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyCDN::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyCDN)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyCDN* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyCDN>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyCDN)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyCDN)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyCDN::MergeFrom(const Transport_proto_CBodyCDN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyCDN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto_CBodyCDN::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyCDN::CopyFrom(const Transport_proto_CBodyCDN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyCDN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyCDN::IsInitialized() const {
  return true;
}

void Transport_proto_CBodyCDN::Swap(Transport_proto_CBodyCDN* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyCDN::InternalSwap(Transport_proto_CBodyCDN* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyCDN::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyCDN

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyBack_GetCDNRsp::kRequestedUrlFieldNumber;
const int Transport_proto_CBodyBack_GetCDNRsp::kCdnhandlerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_GetCDNRsp::Transport_proto_CBodyBack_GetCDNRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
}
Transport_proto_CBodyBack_GetCDNRsp::Transport_proto_CBodyBack_GetCDNRsp(const Transport_proto_CBodyBack_GetCDNRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_requested_url()) {
    requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
  }
  cdnhandler_ = from.cdnhandler_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
}

void Transport_proto_CBodyBack_GetCDNRsp::SharedCtor() {
  _cached_size_ = 0;
  requested_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnhandler_ = 0;
}

Transport_proto_CBodyBack_GetCDNRsp::~Transport_proto_CBodyBack_GetCDNRsp() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  SharedDtor();
}

void Transport_proto_CBodyBack_GetCDNRsp::SharedDtor() {
  requested_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyBack_GetCDNRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_GetCDNRsp::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_GetCDNRsp& Transport_proto_CBodyBack_GetCDNRsp::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_GetCDNRsp* Transport_proto_CBodyBack_GetCDNRsp::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_GetCDNRsp* n = new Transport_proto_CBodyBack_GetCDNRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_GetCDNRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_requested_url()) {
    GOOGLE_DCHECK(!requested_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*requested_url_.UnsafeRawStringPointer())->clear();
  }
  cdnhandler_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_GetCDNRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string requested_url = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requested_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->requested_url().data(), static_cast<int>(this->requested_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 cdnhandler = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cdnhandler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnhandler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_GetCDNRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string requested_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->requested_url(), output);
  }

  // required int32 cdnhandler = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cdnhandler(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_GetCDNRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string requested_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->requested_url().data(), static_cast<int>(this->requested_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->requested_url(), target);
  }

  // required int32 cdnhandler = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cdnhandler(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  return target;
}

size_t Transport_proto_CBodyBack_GetCDNRsp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  size_t total_size = 0;

  if (has_requested_url()) {
    // required string requested_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());
  }

  if (has_cdnhandler()) {
    // required int32 cdnhandler = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());
  }

  return total_size;
}
size_t Transport_proto_CBodyBack_GetCDNRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string requested_url = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requested_url());

    // required int32 cdnhandler = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_GetCDNRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_GetCDNRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_GetCDNRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_GetCDNRsp::MergeFrom(const Transport_proto_CBodyBack_GetCDNRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_requested_url();
      requested_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requested_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      cdnhandler_ = from.cdnhandler_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyBack_GetCDNRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_GetCDNRsp::CopyFrom(const Transport_proto_CBodyBack_GetCDNRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_GetCDNRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyBack_GetCDNRsp::Swap(Transport_proto_CBodyBack_GetCDNRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_GetCDNRsp::InternalSwap(Transport_proto_CBodyBack_GetCDNRsp* other) {
  using std::swap;
  requested_url_.Swap(&other->requested_url_);
  swap(cdnhandler_, other->cdnhandler_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_GetCDNRsp::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_GetCDNRsp

// required string requested_url = 1;
bool Transport_proto_CBodyBack_GetCDNRsp::has_requested_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyBack_GetCDNRsp::set_has_requested_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyBack_GetCDNRsp::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyBack_GetCDNRsp::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
const ::std::string& Transport_proto_CBodyBack_GetCDNRsp::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  return requested_url_.GetNoArena();
}
void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
#endif
void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
::std::string* Transport_proto_CBodyBack_GetCDNRsp::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_GetCDNRsp::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_GetCDNRsp::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}

// required int32 cdnhandler = 2;
bool Transport_proto_CBodyBack_GetCDNRsp::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyBack_GetCDNRsp::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyBack_GetCDNRsp::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyBack_GetCDNRsp::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
::google::protobuf::int32 Transport_proto_CBodyBack_GetCDNRsp::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.cdnhandler)
  return cdnhandler_;
}
void Transport_proto_CBodyBack_GetCDNRsp::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.cdnhandler)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyBack_GetCDNRspAnother::kCDNURLFieldNumber;
const int Transport_proto_CBodyBack_GetCDNRspAnother::kUserIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_GetCDNRspAnother::Transport_proto_CBodyBack_GetCDNRspAnother()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
}
Transport_proto_CBodyBack_GetCDNRspAnother::Transport_proto_CBodyBack_GetCDNRspAnother(const Transport_proto_CBodyBack_GetCDNRspAnother& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cdn_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_cdn_url()) {
    cdn_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdn_url_);
  }
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
}

void Transport_proto_CBodyBack_GetCDNRspAnother::SharedCtor() {
  _cached_size_ = 0;
  cdn_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transport_proto_CBodyBack_GetCDNRspAnother::~Transport_proto_CBodyBack_GetCDNRspAnother() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  SharedDtor();
}

void Transport_proto_CBodyBack_GetCDNRspAnother::SharedDtor() {
  cdn_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyBack_GetCDNRspAnother::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_GetCDNRspAnother::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_GetCDNRspAnother& Transport_proto_CBodyBack_GetCDNRspAnother::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_GetCDNRspAnother* Transport_proto_CBodyBack_GetCDNRspAnother::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_GetCDNRspAnother* n = new Transport_proto_CBodyBack_GetCDNRspAnother;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_GetCDNRspAnother::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!cdn_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*cdn_url_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_GetCDNRspAnother::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CDN_URL = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdn_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string UserID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_GetCDNRspAnother::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CDN_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdn_url(), output);
  }

  // required string UserID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->userid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_GetCDNRspAnother::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string CDN_URL = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdn_url().data(), static_cast<int>(this->cdn_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdn_url(), target);
  }

  // required string UserID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  return target;
}

size_t Transport_proto_CBodyBack_GetCDNRspAnother::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  size_t total_size = 0;

  if (has_cdn_url()) {
    // required string CDN_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdn_url());
  }

  if (has_userid()) {
    // required string UserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  return total_size;
}
size_t Transport_proto_CBodyBack_GetCDNRspAnother::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string CDN_URL = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdn_url());

    // required string UserID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_GetCDNRspAnother::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_GetCDNRspAnother* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_GetCDNRspAnother>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_GetCDNRspAnother::MergeFrom(const Transport_proto_CBodyBack_GetCDNRspAnother& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cdn_url();
      cdn_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdn_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
  }
}

void Transport_proto_CBodyBack_GetCDNRspAnother::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_GetCDNRspAnother::CopyFrom(const Transport_proto_CBodyBack_GetCDNRspAnother& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_GetCDNRspAnother::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyBack_GetCDNRspAnother::Swap(Transport_proto_CBodyBack_GetCDNRspAnother* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_GetCDNRspAnother::InternalSwap(Transport_proto_CBodyBack_GetCDNRspAnother* other) {
  using std::swap;
  cdn_url_.Swap(&other->cdn_url_);
  userid_.Swap(&other->userid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_GetCDNRspAnother::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_GetCDNRspAnother

// required string CDN_URL = 1;
bool Transport_proto_CBodyBack_GetCDNRspAnother::has_cdn_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_has_cdn_url() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::clear_has_cdn_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::clear_cdn_url() {
  cdn_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdn_url();
}
const ::std::string& Transport_proto_CBodyBack_GetCDNRspAnother::cdn_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  return cdn_url_.GetNoArena();
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const ::std::string& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(::std::string&& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
#endif
void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const char* value, size_t size) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::mutable_cdn_url() {
  set_has_cdn_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  return cdn_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::release_cdn_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  clear_has_cdn_url();
  return cdn_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_allocated_cdn_url(::std::string* cdn_url) {
  if (cdn_url != NULL) {
    set_has_cdn_url();
  } else {
    clear_has_cdn_url();
  }
  cdn_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdn_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}

// required string UserID = 2;
bool Transport_proto_CBodyBack_GetCDNRspAnother::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyBack_GetCDNRspAnother::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& Transport_proto_CBodyBack_GetCDNRspAnother::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  return userid_.GetNoArena();
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
#endif
void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_GetCDNRspAnother::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_AddMirrorRsp::Transport_proto_CBodyBack_AddMirrorRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
}
Transport_proto_CBodyBack_AddMirrorRsp::Transport_proto_CBodyBack_AddMirrorRsp(const Transport_proto_CBodyBack_AddMirrorRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
}

void Transport_proto_CBodyBack_AddMirrorRsp::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto_CBodyBack_AddMirrorRsp::~Transport_proto_CBodyBack_AddMirrorRsp() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  SharedDtor();
}

void Transport_proto_CBodyBack_AddMirrorRsp::SharedDtor() {
}

void Transport_proto_CBodyBack_AddMirrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_AddMirrorRsp::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_AddMirrorRsp& Transport_proto_CBodyBack_AddMirrorRsp::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_AddMirrorRsp* Transport_proto_CBodyBack_AddMirrorRsp::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_AddMirrorRsp* n = new Transport_proto_CBodyBack_AddMirrorRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_AddMirrorRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_AddMirrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_AddMirrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_AddMirrorRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  return target;
}

size_t Transport_proto_CBodyBack_AddMirrorRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_AddMirrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_AddMirrorRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_AddMirrorRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_AddMirrorRsp::MergeFrom(const Transport_proto_CBodyBack_AddMirrorRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto_CBodyBack_AddMirrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_AddMirrorRsp::CopyFrom(const Transport_proto_CBodyBack_AddMirrorRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_AddMirrorRsp::IsInitialized() const {
  return true;
}

void Transport_proto_CBodyBack_AddMirrorRsp::Swap(Transport_proto_CBodyBack_AddMirrorRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_AddMirrorRsp::InternalSwap(Transport_proto_CBodyBack_AddMirrorRsp* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_AddMirrorRsp::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_AddMirrorRsp

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyBack_DelFile::kCdnhandlerFieldNumber;
const int Transport_proto_CBodyBack_DelFile::kDelFilelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_DelFile::Transport_proto_CBodyBack_DelFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.DelFile)
}
Transport_proto_CBodyBack_DelFile::Transport_proto_CBodyBack_DelFile(const Transport_proto_CBodyBack_DelFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delfilelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_delfilelist()) {
    delfilelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delfilelist_);
  }
  cdnhandler_ = from.cdnhandler_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.DelFile)
}

void Transport_proto_CBodyBack_DelFile::SharedCtor() {
  _cached_size_ = 0;
  delfilelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnhandler_ = 0;
}

Transport_proto_CBodyBack_DelFile::~Transport_proto_CBodyBack_DelFile() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.DelFile)
  SharedDtor();
}

void Transport_proto_CBodyBack_DelFile::SharedDtor() {
  delfilelist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyBack_DelFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_DelFile::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_DelFile& Transport_proto_CBodyBack_DelFile::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_DelFile* Transport_proto_CBodyBack_DelFile::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_DelFile* n = new Transport_proto_CBodyBack_DelFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_DelFile::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_delfilelist()) {
    GOOGLE_DCHECK(!delfilelist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*delfilelist_.UnsafeRawStringPointer())->clear();
  }
  cdnhandler_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_DelFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cdnhandler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cdnhandler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnhandler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string DelFilelist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delfilelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->delfilelist().data(), static_cast<int>(this->delfilelist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.DelFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.DelFile)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_DelFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnhandler = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cdnhandler(), output);
  }

  // required string DelFilelist = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->delfilelist().data(), static_cast<int>(this->delfilelist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->delfilelist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.DelFile)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_DelFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnhandler = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cdnhandler(), target);
  }

  // required string DelFilelist = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->delfilelist().data(), static_cast<int>(this->delfilelist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->delfilelist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.DelFile)
  return target;
}

size_t Transport_proto_CBodyBack_DelFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  size_t total_size = 0;

  if (has_delfilelist()) {
    // required string DelFilelist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delfilelist());
  }

  if (has_cdnhandler()) {
    // required int32 cdnhandler = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());
  }

  return total_size;
}
size_t Transport_proto_CBodyBack_DelFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string DelFilelist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delfilelist());

    // required int32 cdnhandler = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_DelFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_DelFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_DelFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.DelFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.DelFile)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_DelFile::MergeFrom(const Transport_proto_CBodyBack_DelFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_delfilelist();
      delfilelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delfilelist_);
    }
    if (cached_has_bits & 0x00000002u) {
      cdnhandler_ = from.cdnhandler_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyBack_DelFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_DelFile::CopyFrom(const Transport_proto_CBodyBack_DelFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.DelFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_DelFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyBack_DelFile::Swap(Transport_proto_CBodyBack_DelFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_DelFile::InternalSwap(Transport_proto_CBodyBack_DelFile* other) {
  using std::swap;
  delfilelist_.Swap(&other->delfilelist_);
  swap(cdnhandler_, other->cdnhandler_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_DelFile::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_DelFile

// required int32 cdnhandler = 1;
bool Transport_proto_CBodyBack_DelFile::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyBack_DelFile::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyBack_DelFile::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyBack_DelFile::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
::google::protobuf::int32 Transport_proto_CBodyBack_DelFile::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.DelFile.cdnhandler)
  return cdnhandler_;
}
void Transport_proto_CBodyBack_DelFile::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.DelFile.cdnhandler)
}

// required string DelFilelist = 2;
bool Transport_proto_CBodyBack_DelFile::has_delfilelist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyBack_DelFile::set_has_delfilelist() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyBack_DelFile::clear_has_delfilelist() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyBack_DelFile::clear_delfilelist() {
  delfilelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_delfilelist();
}
const ::std::string& Transport_proto_CBodyBack_DelFile::delfilelist() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  return delfilelist_.GetNoArena();
}
void Transport_proto_CBodyBack_DelFile::set_delfilelist(const ::std::string& value) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_DelFile::set_delfilelist(::std::string&& value) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
#endif
void Transport_proto_CBodyBack_DelFile::set_delfilelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
void Transport_proto_CBodyBack_DelFile::set_delfilelist(const char* value, size_t size) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
::std::string* Transport_proto_CBodyBack_DelFile::mutable_delfilelist() {
  set_has_delfilelist();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  return delfilelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_DelFile::release_delfilelist() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  clear_has_delfilelist();
  return delfilelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_DelFile::set_allocated_delfilelist(::std::string* delfilelist) {
  if (delfilelist != NULL) {
    set_has_delfilelist();
  } else {
    clear_has_delfilelist();
  }
  delfilelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delfilelist);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyBack_AddFile::kCdnhandlerFieldNumber;
const int Transport_proto_CBodyBack_AddFile::kAddFilelistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_AddFile::Transport_proto_CBodyBack_AddFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.AddFile)
}
Transport_proto_CBodyBack_AddFile::Transport_proto_CBodyBack_AddFile(const Transport_proto_CBodyBack_AddFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addfilelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_addfilelist()) {
    addfilelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addfilelist_);
  }
  cdnhandler_ = from.cdnhandler_;
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.AddFile)
}

void Transport_proto_CBodyBack_AddFile::SharedCtor() {
  _cached_size_ = 0;
  addfilelist_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdnhandler_ = 0;
}

Transport_proto_CBodyBack_AddFile::~Transport_proto_CBodyBack_AddFile() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.AddFile)
  SharedDtor();
}

void Transport_proto_CBodyBack_AddFile::SharedDtor() {
  addfilelist_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyBack_AddFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_AddFile::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_AddFile& Transport_proto_CBodyBack_AddFile::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_AddFile* Transport_proto_CBodyBack_AddFile::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_AddFile* n = new Transport_proto_CBodyBack_AddFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_AddFile::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_addfilelist()) {
    GOOGLE_DCHECK(!addfilelist_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*addfilelist_.UnsafeRawStringPointer())->clear();
  }
  cdnhandler_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_AddFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cdnhandler = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cdnhandler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cdnhandler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string AddFilelist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addfilelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addfilelist().data(), static_cast<int>(this->addfilelist().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.AddFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.AddFile)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_AddFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnhandler = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cdnhandler(), output);
  }

  // required string AddFilelist = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addfilelist().data(), static_cast<int>(this->addfilelist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addfilelist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.AddFile)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_AddFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 cdnhandler = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cdnhandler(), target);
  }

  // required string AddFilelist = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addfilelist().data(), static_cast<int>(this->addfilelist().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addfilelist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.AddFile)
  return target;
}

size_t Transport_proto_CBodyBack_AddFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  size_t total_size = 0;

  if (has_addfilelist()) {
    // required string AddFilelist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addfilelist());
  }

  if (has_cdnhandler()) {
    // required int32 cdnhandler = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());
  }

  return total_size;
}
size_t Transport_proto_CBodyBack_AddFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string AddFilelist = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addfilelist());

    // required int32 cdnhandler = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cdnhandler());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_AddFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_AddFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_AddFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.AddFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.AddFile)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_AddFile::MergeFrom(const Transport_proto_CBodyBack_AddFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_addfilelist();
      addfilelist_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addfilelist_);
    }
    if (cached_has_bits & 0x00000002u) {
      cdnhandler_ = from.cdnhandler_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Transport_proto_CBodyBack_AddFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_AddFile::CopyFrom(const Transport_proto_CBodyBack_AddFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.AddFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_AddFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyBack_AddFile::Swap(Transport_proto_CBodyBack_AddFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_AddFile::InternalSwap(Transport_proto_CBodyBack_AddFile* other) {
  using std::swap;
  addfilelist_.Swap(&other->addfilelist_);
  swap(cdnhandler_, other->cdnhandler_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_AddFile::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_AddFile

// required int32 cdnhandler = 1;
bool Transport_proto_CBodyBack_AddFile::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyBack_AddFile::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyBack_AddFile::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyBack_AddFile::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
::google::protobuf::int32 Transport_proto_CBodyBack_AddFile::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.AddFile.cdnhandler)
  return cdnhandler_;
}
void Transport_proto_CBodyBack_AddFile::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.AddFile.cdnhandler)
}

// required string AddFilelist = 2;
bool Transport_proto_CBodyBack_AddFile::has_addfilelist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyBack_AddFile::set_has_addfilelist() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyBack_AddFile::clear_has_addfilelist() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyBack_AddFile::clear_addfilelist() {
  addfilelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addfilelist();
}
const ::std::string& Transport_proto_CBodyBack_AddFile::addfilelist() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  return addfilelist_.GetNoArena();
}
void Transport_proto_CBodyBack_AddFile::set_addfilelist(const ::std::string& value) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_AddFile::set_addfilelist(::std::string&& value) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
#endif
void Transport_proto_CBodyBack_AddFile::set_addfilelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
void Transport_proto_CBodyBack_AddFile::set_addfilelist(const char* value, size_t size) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
::std::string* Transport_proto_CBodyBack_AddFile::mutable_addfilelist() {
  set_has_addfilelist();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  return addfilelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_AddFile::release_addfilelist() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  clear_has_addfilelist();
  return addfilelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_AddFile::set_allocated_addfilelist(::std::string* addfilelist) {
  if (addfilelist != NULL) {
    set_has_addfilelist();
  } else {
    clear_has_addfilelist();
  }
  addfilelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addfilelist);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Transport_proto_CBodyBack_CDNFindSourceResult::kUseridFieldNumber;
const int Transport_proto_CBodyBack_CDNFindSourceResult::kRedirecturlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack_CDNFindSourceResult::Transport_proto_CBodyBack_CDNFindSourceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
}
Transport_proto_CBodyBack_CDNFindSourceResult::Transport_proto_CBodyBack_CDNFindSourceResult(const Transport_proto_CBodyBack_CDNFindSourceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_userid()) {
    userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
  }
  redirecturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirecturl()) {
    redirecturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirecturl_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
}

void Transport_proto_CBodyBack_CDNFindSourceResult::SharedCtor() {
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirecturl_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Transport_proto_CBodyBack_CDNFindSourceResult::~Transport_proto_CBodyBack_CDNFindSourceResult() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  SharedDtor();
}

void Transport_proto_CBodyBack_CDNFindSourceResult::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirecturl_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Transport_proto_CBodyBack_CDNFindSourceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack_CDNFindSourceResult::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack_CDNFindSourceResult& Transport_proto_CBodyBack_CDNFindSourceResult::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack_CDNFindSourceResult* Transport_proto_CBodyBack_CDNFindSourceResult::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack_CDNFindSourceResult* n = new Transport_proto_CBodyBack_CDNFindSourceResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack_CDNFindSourceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!userid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*userid_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!redirecturl_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirecturl_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack_CDNFindSourceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), static_cast<int>(this->userid().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string redirecturl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirecturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirecturl().data(), static_cast<int>(this->redirecturl().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack_CDNFindSourceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string redirecturl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirecturl().data(), static_cast<int>(this->redirecturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirecturl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
}

::google::protobuf::uint8* Transport_proto_CBodyBack_CDNFindSourceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string userid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), static_cast<int>(this->userid().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string redirecturl = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirecturl().data(), static_cast<int>(this->redirecturl().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirecturl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  return target;
}

size_t Transport_proto_CBodyBack_CDNFindSourceResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  size_t total_size = 0;

  if (has_userid()) {
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_redirecturl()) {
    // required string redirecturl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redirecturl());
  }

  return total_size;
}
size_t Transport_proto_CBodyBack_CDNFindSourceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string redirecturl = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redirecturl());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack_CDNFindSourceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack_CDNFindSourceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack_CDNFindSourceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack_CDNFindSourceResult::MergeFrom(const Transport_proto_CBodyBack_CDNFindSourceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_redirecturl();
      redirecturl_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirecturl_);
    }
  }
}

void Transport_proto_CBodyBack_CDNFindSourceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack_CDNFindSourceResult::CopyFrom(const Transport_proto_CBodyBack_CDNFindSourceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack_CDNFindSourceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Transport_proto_CBodyBack_CDNFindSourceResult::Swap(Transport_proto_CBodyBack_CDNFindSourceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack_CDNFindSourceResult::InternalSwap(Transport_proto_CBodyBack_CDNFindSourceResult* other) {
  using std::swap;
  userid_.Swap(&other->userid_);
  redirecturl_.Swap(&other->redirecturl_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack_CDNFindSourceResult::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack_CDNFindSourceResult

// required string userid = 1;
bool Transport_proto_CBodyBack_CDNFindSourceResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
const ::std::string& Transport_proto_CBodyBack_CDNFindSourceResult::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  return userid_.GetNoArena();
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
#endif
void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}

// required string redirecturl = 2;
bool Transport_proto_CBodyBack_CDNFindSourceResult::has_redirecturl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_has_redirecturl() {
  _has_bits_[0] |= 0x00000002u;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::clear_has_redirecturl() {
  _has_bits_[0] &= ~0x00000002u;
}
void Transport_proto_CBodyBack_CDNFindSourceResult::clear_redirecturl() {
  redirecturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirecturl();
}
const ::std::string& Transport_proto_CBodyBack_CDNFindSourceResult::redirecturl() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  return redirecturl_.GetNoArena();
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const ::std::string& value) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
#if LANG_CXX11
void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(::std::string&& value) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
#endif
void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const char* value, size_t size) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::mutable_redirecturl() {
  set_has_redirecturl();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  return redirecturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::release_redirecturl() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  clear_has_redirecturl();
  return redirecturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Transport_proto_CBodyBack_CDNFindSourceResult::set_allocated_redirecturl(::std::string* redirecturl) {
  if (redirecturl != NULL) {
    set_has_redirecturl();
  } else {
    clear_has_redirecturl();
  }
  redirecturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirecturl);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto_CBodyBack::Transport_proto_CBodyBack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto.CBodyBack)
}
Transport_proto_CBodyBack::Transport_proto_CBodyBack(const Transport_proto_CBodyBack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto.CBodyBack)
}

void Transport_proto_CBodyBack::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto_CBodyBack::~Transport_proto_CBodyBack() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto.CBodyBack)
  SharedDtor();
}

void Transport_proto_CBodyBack::SharedDtor() {
}

void Transport_proto_CBodyBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto_CBodyBack::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto_CBodyBack& Transport_proto_CBodyBack::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto_CBodyBack* Transport_proto_CBodyBack::New(::google::protobuf::Arena* arena) const {
  Transport_proto_CBodyBack* n = new Transport_proto_CBodyBack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto_CBodyBack::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto.CBodyBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto_CBodyBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto.CBodyBack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto.CBodyBack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto.CBodyBack)
  return false;
#undef DO_
}

void Transport_proto_CBodyBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto.CBodyBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto.CBodyBack)
}

::google::protobuf::uint8* Transport_proto_CBodyBack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto.CBodyBack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto.CBodyBack)
  return target;
}

size_t Transport_proto_CBodyBack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto.CBodyBack)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto_CBodyBack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto.CBodyBack)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto_CBodyBack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto_CBodyBack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto.CBodyBack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto.CBodyBack)
    MergeFrom(*source);
  }
}

void Transport_proto_CBodyBack::MergeFrom(const Transport_proto_CBodyBack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto.CBodyBack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto_CBodyBack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto.CBodyBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto_CBodyBack::CopyFrom(const Transport_proto_CBodyBack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto.CBodyBack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto_CBodyBack::IsInitialized() const {
  return true;
}

void Transport_proto_CBodyBack::Swap(Transport_proto_CBodyBack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto_CBodyBack::InternalSwap(Transport_proto_CBodyBack* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto_CBodyBack::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto_CBodyBack

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Transport_proto::Transport_proto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_transport_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transport_proto.Transport_proto)
}
Transport_proto::Transport_proto(const Transport_proto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_proto.Transport_proto)
}

void Transport_proto::SharedCtor() {
  _cached_size_ = 0;
}

Transport_proto::~Transport_proto() {
  // @@protoc_insertion_point(destructor:transport_proto.Transport_proto)
  SharedDtor();
}

void Transport_proto::SharedDtor() {
}

void Transport_proto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transport_proto::descriptor() {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Transport_proto& Transport_proto::default_instance() {
  protobuf_transport_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

Transport_proto* Transport_proto::New(::google::protobuf::Arena* arena) const {
  Transport_proto* n = new Transport_proto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Transport_proto::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_proto.Transport_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Transport_proto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transport_proto.Transport_proto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transport_proto.Transport_proto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transport_proto.Transport_proto)
  return false;
#undef DO_
}

void Transport_proto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transport_proto.Transport_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:transport_proto.Transport_proto)
}

::google::protobuf::uint8* Transport_proto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transport_proto.Transport_proto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_proto.Transport_proto)
  return target;
}

size_t Transport_proto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_proto.Transport_proto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transport_proto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_proto.Transport_proto)
  GOOGLE_DCHECK_NE(&from, this);
  const Transport_proto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Transport_proto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_proto.Transport_proto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_proto.Transport_proto)
    MergeFrom(*source);
  }
}

void Transport_proto::MergeFrom(const Transport_proto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_proto.Transport_proto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Transport_proto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_proto.Transport_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transport_proto::CopyFrom(const Transport_proto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_proto.Transport_proto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transport_proto::IsInitialized() const {
  return true;
}

void Transport_proto::Swap(Transport_proto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Transport_proto::InternalSwap(Transport_proto* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Transport_proto::GetMetadata() const {
  protobuf_transport_5fproto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_transport_5fproto_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Transport_proto

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_proto

// @@protoc_insertion_point(global_scope)
