// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_proto.proto

#ifndef PROTOBUF_transport_5fproto_2eproto__INCLUDED
#define PROTOBUF_transport_5fproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace transport_proto {
class Transport_proto;
class Transport_protoDefaultTypeInternal;
extern Transport_protoDefaultTypeInternal _Transport_proto_default_instance_;
class Transport_proto_CBodyBack;
class Transport_proto_CBodyBackDefaultTypeInternal;
extern Transport_proto_CBodyBackDefaultTypeInternal _Transport_proto_CBodyBack_default_instance_;
class Transport_proto_CBodyBack_AddFile;
class Transport_proto_CBodyBack_AddFileDefaultTypeInternal;
extern Transport_proto_CBodyBack_AddFileDefaultTypeInternal _Transport_proto_CBodyBack_AddFile_default_instance_;
class Transport_proto_CBodyBack_AddMirrorRsp;
class Transport_proto_CBodyBack_AddMirrorRspDefaultTypeInternal;
extern Transport_proto_CBodyBack_AddMirrorRspDefaultTypeInternal _Transport_proto_CBodyBack_AddMirrorRsp_default_instance_;
class Transport_proto_CBodyBack_CDNFindSourceResult;
class Transport_proto_CBodyBack_CDNFindSourceResultDefaultTypeInternal;
extern Transport_proto_CBodyBack_CDNFindSourceResultDefaultTypeInternal _Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_;
class Transport_proto_CBodyBack_DelFile;
class Transport_proto_CBodyBack_DelFileDefaultTypeInternal;
extern Transport_proto_CBodyBack_DelFileDefaultTypeInternal _Transport_proto_CBodyBack_DelFile_default_instance_;
class Transport_proto_CBodyBack_GetCDNRsp;
class Transport_proto_CBodyBack_GetCDNRspDefaultTypeInternal;
extern Transport_proto_CBodyBack_GetCDNRspDefaultTypeInternal _Transport_proto_CBodyBack_GetCDNRsp_default_instance_;
class Transport_proto_CBodyBack_GetCDNRspAnother;
class Transport_proto_CBodyBack_GetCDNRspAnotherDefaultTypeInternal;
extern Transport_proto_CBodyBack_GetCDNRspAnotherDefaultTypeInternal _Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_;
class Transport_proto_CBodyCDN;
class Transport_proto_CBodyCDNDefaultTypeInternal;
extern Transport_proto_CBodyCDNDefaultTypeInternal _Transport_proto_CBodyCDN_default_instance_;
class Transport_proto_CBodyCDN_AssignCDNRsp;
class Transport_proto_CBodyCDN_AssignCDNRspDefaultTypeInternal;
extern Transport_proto_CBodyCDN_AssignCDNRspDefaultTypeInternal _Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_;
class Transport_proto_CBodyCDN_CDNReportIP;
class Transport_proto_CBodyCDN_CDNReportIPDefaultTypeInternal;
extern Transport_proto_CBodyCDN_CDNReportIPDefaultTypeInternal _Transport_proto_CBodyCDN_CDNReportIP_default_instance_;
class Transport_proto_CBodyCDN_FileInfo;
class Transport_proto_CBodyCDN_FileInfoDefaultTypeInternal;
extern Transport_proto_CBodyCDN_FileInfoDefaultTypeInternal _Transport_proto_CBodyCDN_FileInfo_default_instance_;
class Transport_proto_CBodyCDN_StateInfo;
class Transport_proto_CBodyCDN_StateInfoDefaultTypeInternal;
extern Transport_proto_CBodyCDN_StateInfoDefaultTypeInternal _Transport_proto_CBodyCDN_StateInfo_default_instance_;
class Transport_proto_CBodyFront;
class Transport_proto_CBodyFrontDefaultTypeInternal;
extern Transport_proto_CBodyFrontDefaultTypeInternal _Transport_proto_CBodyFront_default_instance_;
class Transport_proto_CBodyFront_AddMirror;
class Transport_proto_CBodyFront_AddMirrorDefaultTypeInternal;
extern Transport_proto_CBodyFront_AddMirrorDefaultTypeInternal _Transport_proto_CBodyFront_AddMirror_default_instance_;
class Transport_proto_CBodyFront_AssignCDN;
class Transport_proto_CBodyFront_AssignCDNDefaultTypeInternal;
extern Transport_proto_CBodyFront_AssignCDNDefaultTypeInternal _Transport_proto_CBodyFront_AssignCDN_default_instance_;
class Transport_proto_CBodyFront_AssignCDNRep;
class Transport_proto_CBodyFront_AssignCDNRepDefaultTypeInternal;
extern Transport_proto_CBodyFront_AssignCDNRepDefaultTypeInternal _Transport_proto_CBodyFront_AssignCDNRep_default_instance_;
class Transport_proto_CBodyFront_GetCDN;
class Transport_proto_CBodyFront_GetCDNDefaultTypeInternal;
extern Transport_proto_CBodyFront_GetCDNDefaultTypeInternal _Transport_proto_CBodyFront_GetCDN_default_instance_;
class Transport_proto_CBodyFront_ReturnManagerIDtoCDN;
class Transport_proto_CBodyFront_ReturnManagerIDtoCDNDefaultTypeInternal;
extern Transport_proto_CBodyFront_ReturnManagerIDtoCDNDefaultTypeInternal _Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_;
class Transport_proto_CHead;
class Transport_proto_CHeadDefaultTypeInternal;
extern Transport_proto_CHeadDefaultTypeInternal _Transport_proto_CHead_default_instance_;
}  // namespace transport_proto

namespace transport_proto {

namespace protobuf_transport_5fproto_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_transport_5fproto_2eproto

enum Transport_proto_CHead_User_Type {
  Transport_proto_CHead_User_Type_General = 0,
  Transport_proto_CHead_User_Type_Enterprise = 1,
  Transport_proto_CHead_User_Type_CDNnode = 2
};
bool Transport_proto_CHead_User_Type_IsValid(int value);
const Transport_proto_CHead_User_Type Transport_proto_CHead_User_Type_User_Type_MIN = Transport_proto_CHead_User_Type_General;
const Transport_proto_CHead_User_Type Transport_proto_CHead_User_Type_User_Type_MAX = Transport_proto_CHead_User_Type_CDNnode;
const int Transport_proto_CHead_User_Type_User_Type_ARRAYSIZE = Transport_proto_CHead_User_Type_User_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_User_Type_descriptor();
inline const ::std::string& Transport_proto_CHead_User_Type_Name(Transport_proto_CHead_User_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Transport_proto_CHead_User_Type_descriptor(), value);
}
inline bool Transport_proto_CHead_User_Type_Parse(
    const ::std::string& name, Transport_proto_CHead_User_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Transport_proto_CHead_User_Type>(
    Transport_proto_CHead_User_Type_descriptor(), name, value);
}
enum Transport_proto_CHead_Cmd_Type {
  Transport_proto_CHead_Cmd_Type_GetCDN = 0,
  Transport_proto_CHead_Cmd_Type_GetCDNRsp = 1,
  Transport_proto_CHead_Cmd_Type_AssignCDN = 2,
  Transport_proto_CHead_Cmd_Type_AssignCDNRsp = 3,
  Transport_proto_CHead_Cmd_Type_AssignCDNRep = 4,
  Transport_proto_CHead_Cmd_Type_AddMirror = 5,
  Transport_proto_CHead_Cmd_Type_AddMirrorRsp = 6,
  Transport_proto_CHead_Cmd_Type_CDNAddFile = 7,
  Transport_proto_CHead_Cmd_Type_CDNDelFile = 8,
  Transport_proto_CHead_Cmd_Type_CDNStateRep = 9,
  Transport_proto_CHead_Cmd_Type_CDNFileRep = 10,
  Transport_proto_CHead_Cmd_Type_AssignCDNRsptoUser = 11,
  Transport_proto_CHead_Cmd_Type_CDNFindSourceResult = 12,
  Transport_proto_CHead_Cmd_Type_CDNReportIP = 13
};
bool Transport_proto_CHead_Cmd_Type_IsValid(int value);
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead_Cmd_Type_Cmd_Type_MIN = Transport_proto_CHead_Cmd_Type_GetCDN;
const Transport_proto_CHead_Cmd_Type Transport_proto_CHead_Cmd_Type_Cmd_Type_MAX = Transport_proto_CHead_Cmd_Type_CDNReportIP;
const int Transport_proto_CHead_Cmd_Type_Cmd_Type_ARRAYSIZE = Transport_proto_CHead_Cmd_Type_Cmd_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_Cmd_Type_descriptor();
inline const ::std::string& Transport_proto_CHead_Cmd_Type_Name(Transport_proto_CHead_Cmd_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Transport_proto_CHead_Cmd_Type_descriptor(), value);
}
inline bool Transport_proto_CHead_Cmd_Type_Parse(
    const ::std::string& name, Transport_proto_CHead_Cmd_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Transport_proto_CHead_Cmd_Type>(
    Transport_proto_CHead_Cmd_Type_descriptor(), name, value);
}
enum Transport_proto_CHead_State_ID {
  Transport_proto_CHead_State_ID_ReqOk = 100,
  Transport_proto_CHead_State_ID_AddmirroOk = 111,
  Transport_proto_CHead_State_ID_NoFee = 112,
  Transport_proto_CHead_State_ID_FindConOk = 120
};
bool Transport_proto_CHead_State_ID_IsValid(int value);
const Transport_proto_CHead_State_ID Transport_proto_CHead_State_ID_State_ID_MIN = Transport_proto_CHead_State_ID_ReqOk;
const Transport_proto_CHead_State_ID Transport_proto_CHead_State_ID_State_ID_MAX = Transport_proto_CHead_State_ID_FindConOk;
const int Transport_proto_CHead_State_ID_State_ID_ARRAYSIZE = Transport_proto_CHead_State_ID_State_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* Transport_proto_CHead_State_ID_descriptor();
inline const ::std::string& Transport_proto_CHead_State_ID_Name(Transport_proto_CHead_State_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    Transport_proto_CHead_State_ID_descriptor(), value);
}
inline bool Transport_proto_CHead_State_ID_Parse(
    const ::std::string& name, Transport_proto_CHead_State_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Transport_proto_CHead_State_ID>(
    Transport_proto_CHead_State_ID_descriptor(), name, value);
}
// ===================================================================

class Transport_proto_CHead : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CHead) */ {
 public:
  Transport_proto_CHead();
  virtual ~Transport_proto_CHead();

  Transport_proto_CHead(const Transport_proto_CHead& from);

  inline Transport_proto_CHead& operator=(const Transport_proto_CHead& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CHead(Transport_proto_CHead&& from) noexcept
    : Transport_proto_CHead() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CHead& operator=(Transport_proto_CHead&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CHead& default_instance();

  static inline const Transport_proto_CHead* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CHead*>(
               &_Transport_proto_CHead_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Transport_proto_CHead* other);
  friend void swap(Transport_proto_CHead& a, Transport_proto_CHead& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CHead* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CHead* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CHead& from);
  void MergeFrom(const Transport_proto_CHead& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CHead* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Transport_proto_CHead_User_Type User_Type;
  static const User_Type General =
    Transport_proto_CHead_User_Type_General;
  static const User_Type Enterprise =
    Transport_proto_CHead_User_Type_Enterprise;
  static const User_Type CDNnode =
    Transport_proto_CHead_User_Type_CDNnode;
  static inline bool User_Type_IsValid(int value) {
    return Transport_proto_CHead_User_Type_IsValid(value);
  }
  static const User_Type User_Type_MIN =
    Transport_proto_CHead_User_Type_User_Type_MIN;
  static const User_Type User_Type_MAX =
    Transport_proto_CHead_User_Type_User_Type_MAX;
  static const int User_Type_ARRAYSIZE =
    Transport_proto_CHead_User_Type_User_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  User_Type_descriptor() {
    return Transport_proto_CHead_User_Type_descriptor();
  }
  static inline const ::std::string& User_Type_Name(User_Type value) {
    return Transport_proto_CHead_User_Type_Name(value);
  }
  static inline bool User_Type_Parse(const ::std::string& name,
      User_Type* value) {
    return Transport_proto_CHead_User_Type_Parse(name, value);
  }

  typedef Transport_proto_CHead_Cmd_Type Cmd_Type;
  static const Cmd_Type GetCDN =
    Transport_proto_CHead_Cmd_Type_GetCDN;
  static const Cmd_Type GetCDNRsp =
    Transport_proto_CHead_Cmd_Type_GetCDNRsp;
  static const Cmd_Type AssignCDN =
    Transport_proto_CHead_Cmd_Type_AssignCDN;
  static const Cmd_Type AssignCDNRsp =
    Transport_proto_CHead_Cmd_Type_AssignCDNRsp;
  static const Cmd_Type AssignCDNRep =
    Transport_proto_CHead_Cmd_Type_AssignCDNRep;
  static const Cmd_Type AddMirror =
    Transport_proto_CHead_Cmd_Type_AddMirror;
  static const Cmd_Type AddMirrorRsp =
    Transport_proto_CHead_Cmd_Type_AddMirrorRsp;
  static const Cmd_Type CDNAddFile =
    Transport_proto_CHead_Cmd_Type_CDNAddFile;
  static const Cmd_Type CDNDelFile =
    Transport_proto_CHead_Cmd_Type_CDNDelFile;
  static const Cmd_Type CDNStateRep =
    Transport_proto_CHead_Cmd_Type_CDNStateRep;
  static const Cmd_Type CDNFileRep =
    Transport_proto_CHead_Cmd_Type_CDNFileRep;
  static const Cmd_Type AssignCDNRsptoUser =
    Transport_proto_CHead_Cmd_Type_AssignCDNRsptoUser;
  static const Cmd_Type CDNFindSourceResult =
    Transport_proto_CHead_Cmd_Type_CDNFindSourceResult;
  static const Cmd_Type CDNReportIP =
    Transport_proto_CHead_Cmd_Type_CDNReportIP;
  static inline bool Cmd_Type_IsValid(int value) {
    return Transport_proto_CHead_Cmd_Type_IsValid(value);
  }
  static const Cmd_Type Cmd_Type_MIN =
    Transport_proto_CHead_Cmd_Type_Cmd_Type_MIN;
  static const Cmd_Type Cmd_Type_MAX =
    Transport_proto_CHead_Cmd_Type_Cmd_Type_MAX;
  static const int Cmd_Type_ARRAYSIZE =
    Transport_proto_CHead_Cmd_Type_Cmd_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Cmd_Type_descriptor() {
    return Transport_proto_CHead_Cmd_Type_descriptor();
  }
  static inline const ::std::string& Cmd_Type_Name(Cmd_Type value) {
    return Transport_proto_CHead_Cmd_Type_Name(value);
  }
  static inline bool Cmd_Type_Parse(const ::std::string& name,
      Cmd_Type* value) {
    return Transport_proto_CHead_Cmd_Type_Parse(name, value);
  }

  typedef Transport_proto_CHead_State_ID State_ID;
  static const State_ID ReqOk =
    Transport_proto_CHead_State_ID_ReqOk;
  static const State_ID AddmirroOk =
    Transport_proto_CHead_State_ID_AddmirroOk;
  static const State_ID NoFee =
    Transport_proto_CHead_State_ID_NoFee;
  static const State_ID FindConOk =
    Transport_proto_CHead_State_ID_FindConOk;
  static inline bool State_ID_IsValid(int value) {
    return Transport_proto_CHead_State_ID_IsValid(value);
  }
  static const State_ID State_ID_MIN =
    Transport_proto_CHead_State_ID_State_ID_MIN;
  static const State_ID State_ID_MAX =
    Transport_proto_CHead_State_ID_State_ID_MAX;
  static const int State_ID_ARRAYSIZE =
    Transport_proto_CHead_State_ID_State_ID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_ID_descriptor() {
    return Transport_proto_CHead_State_ID_descriptor();
  }
  static inline const ::std::string& State_ID_Name(State_ID value) {
    return Transport_proto_CHead_State_ID_Name(value);
  }
  static inline bool State_ID_Parse(const ::std::string& name,
      State_ID* value) {
    return Transport_proto_CHead_State_ID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string Version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // required string UserType = 2;
  bool has_usertype() const;
  void clear_usertype();
  static const int kUserTypeFieldNumber = 2;
  const ::std::string& usertype() const;
  void set_usertype(const ::std::string& value);
  #if LANG_CXX11
  void set_usertype(::std::string&& value);
  #endif
  void set_usertype(const char* value);
  void set_usertype(const char* value, size_t size);
  ::std::string* mutable_usertype();
  ::std::string* release_usertype();
  void set_allocated_usertype(::std::string* usertype);

  // required string CmdType = 3;
  bool has_cmdtype() const;
  void clear_cmdtype();
  static const int kCmdTypeFieldNumber = 3;
  const ::std::string& cmdtype() const;
  void set_cmdtype(const ::std::string& value);
  #if LANG_CXX11
  void set_cmdtype(::std::string&& value);
  #endif
  void set_cmdtype(const char* value);
  void set_cmdtype(const char* value, size_t size);
  ::std::string* mutable_cmdtype();
  ::std::string* release_cmdtype();
  void set_allocated_cmdtype(::std::string* cmdtype);

  // required string StateID = 4;
  bool has_stateid() const;
  void clear_stateid();
  static const int kStateIDFieldNumber = 4;
  const ::std::string& stateid() const;
  void set_stateid(const ::std::string& value);
  #if LANG_CXX11
  void set_stateid(::std::string&& value);
  #endif
  void set_stateid(const char* value);
  void set_stateid(const char* value, size_t size);
  ::std::string* mutable_stateid();
  ::std::string* release_stateid();
  void set_allocated_stateid(::std::string* stateid);

  // required string RspTime = 5;
  bool has_rsptime() const;
  void clear_rsptime();
  static const int kRspTimeFieldNumber = 5;
  const ::std::string& rsptime() const;
  void set_rsptime(const ::std::string& value);
  #if LANG_CXX11
  void set_rsptime(::std::string&& value);
  #endif
  void set_rsptime(const char* value);
  void set_rsptime(const char* value, size_t size);
  ::std::string* mutable_rsptime();
  ::std::string* release_rsptime();
  void set_allocated_rsptime(::std::string* rsptime);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CHead)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_usertype();
  void clear_has_usertype();
  void set_has_cmdtype();
  void clear_has_cmdtype();
  void set_has_stateid();
  void clear_has_stateid();
  void set_has_rsptime();
  void clear_has_rsptime();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr usertype_;
  ::google::protobuf::internal::ArenaStringPtr cmdtype_;
  ::google::protobuf::internal::ArenaStringPtr stateid_;
  ::google::protobuf::internal::ArenaStringPtr rsptime_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront_GetCDN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront.GetCDN) */ {
 public:
  Transport_proto_CBodyFront_GetCDN();
  virtual ~Transport_proto_CBodyFront_GetCDN();

  Transport_proto_CBodyFront_GetCDN(const Transport_proto_CBodyFront_GetCDN& from);

  inline Transport_proto_CBodyFront_GetCDN& operator=(const Transport_proto_CBodyFront_GetCDN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront_GetCDN(Transport_proto_CBodyFront_GetCDN&& from) noexcept
    : Transport_proto_CBodyFront_GetCDN() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront_GetCDN& operator=(Transport_proto_CBodyFront_GetCDN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront_GetCDN& default_instance();

  static inline const Transport_proto_CBodyFront_GetCDN* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront_GetCDN*>(
               &_Transport_proto_CBodyFront_GetCDN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Transport_proto_CBodyFront_GetCDN* other);
  friend void swap(Transport_proto_CBodyFront_GetCDN& a, Transport_proto_CBodyFront_GetCDN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront_GetCDN* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront_GetCDN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront_GetCDN& from);
  void MergeFrom(const Transport_proto_CBodyFront_GetCDN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront_GetCDN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string User_URL = 1;
  bool has_user_url() const;
  void clear_user_url();
  static const int kUserURLFieldNumber = 1;
  const ::std::string& user_url() const;
  void set_user_url(const ::std::string& value);
  #if LANG_CXX11
  void set_user_url(::std::string&& value);
  #endif
  void set_user_url(const char* value);
  void set_user_url(const char* value, size_t size);
  ::std::string* mutable_user_url();
  ::std::string* release_user_url();
  void set_allocated_user_url(::std::string* user_url);

  // required string UserID = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront.GetCDN)
 private:
  void set_has_user_url();
  void clear_has_user_url();
  void set_has_userid();
  void clear_has_userid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr user_url_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront_AssignCDN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront.AssignCDN) */ {
 public:
  Transport_proto_CBodyFront_AssignCDN();
  virtual ~Transport_proto_CBodyFront_AssignCDN();

  Transport_proto_CBodyFront_AssignCDN(const Transport_proto_CBodyFront_AssignCDN& from);

  inline Transport_proto_CBodyFront_AssignCDN& operator=(const Transport_proto_CBodyFront_AssignCDN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront_AssignCDN(Transport_proto_CBodyFront_AssignCDN&& from) noexcept
    : Transport_proto_CBodyFront_AssignCDN() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront_AssignCDN& operator=(Transport_proto_CBodyFront_AssignCDN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront_AssignCDN& default_instance();

  static inline const Transport_proto_CBodyFront_AssignCDN* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront_AssignCDN*>(
               &_Transport_proto_CBodyFront_AssignCDN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Transport_proto_CBodyFront_AssignCDN* other);
  friend void swap(Transport_proto_CBodyFront_AssignCDN& a, Transport_proto_CBodyFront_AssignCDN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront_AssignCDN* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront_AssignCDN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront_AssignCDN& from);
  void MergeFrom(const Transport_proto_CBodyFront_AssignCDN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront_AssignCDN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string method = 1;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 1;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // required string User_URL = 2;
  bool has_user_url() const;
  void clear_user_url();
  static const int kUserURLFieldNumber = 2;
  const ::std::string& user_url() const;
  void set_user_url(const ::std::string& value);
  #if LANG_CXX11
  void set_user_url(::std::string&& value);
  #endif
  void set_user_url(const char* value);
  void set_user_url(const char* value, size_t size);
  ::std::string* mutable_user_url();
  ::std::string* release_user_url();
  void set_allocated_user_url(::std::string* user_url);

  // required int32 managerid = 3;
  bool has_managerid() const;
  void clear_managerid();
  static const int kManageridFieldNumber = 3;
  ::google::protobuf::int32 managerid() const;
  void set_managerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront.AssignCDN)
 private:
  void set_has_method();
  void clear_has_method();
  void set_has_user_url();
  void clear_has_user_url();
  void set_has_managerid();
  void clear_has_managerid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr user_url_;
  ::google::protobuf::int32 managerid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront_AssignCDNRep : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront.AssignCDNRep) */ {
 public:
  Transport_proto_CBodyFront_AssignCDNRep();
  virtual ~Transport_proto_CBodyFront_AssignCDNRep();

  Transport_proto_CBodyFront_AssignCDNRep(const Transport_proto_CBodyFront_AssignCDNRep& from);

  inline Transport_proto_CBodyFront_AssignCDNRep& operator=(const Transport_proto_CBodyFront_AssignCDNRep& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront_AssignCDNRep(Transport_proto_CBodyFront_AssignCDNRep&& from) noexcept
    : Transport_proto_CBodyFront_AssignCDNRep() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront_AssignCDNRep& operator=(Transport_proto_CBodyFront_AssignCDNRep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront_AssignCDNRep& default_instance();

  static inline const Transport_proto_CBodyFront_AssignCDNRep* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront_AssignCDNRep*>(
               &_Transport_proto_CBodyFront_AssignCDNRep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Transport_proto_CBodyFront_AssignCDNRep* other);
  friend void swap(Transport_proto_CBodyFront_AssignCDNRep& a, Transport_proto_CBodyFront_AssignCDNRep& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront_AssignCDNRep* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront_AssignCDNRep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront_AssignCDNRep& from);
  void MergeFrom(const Transport_proto_CBodyFront_AssignCDNRep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront_AssignCDNRep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string requested_url = 2;
  bool has_requested_url() const;
  void clear_requested_url();
  static const int kRequestedUrlFieldNumber = 2;
  const ::std::string& requested_url() const;
  void set_requested_url(const ::std::string& value);
  #if LANG_CXX11
  void set_requested_url(::std::string&& value);
  #endif
  void set_requested_url(const char* value);
  void set_requested_url(const char* value, size_t size);
  ::std::string* mutable_requested_url();
  ::std::string* release_requested_url();
  void set_allocated_requested_url(::std::string* requested_url);

  // required int32 cdnid = 1;
  bool has_cdnid() const;
  void clear_cdnid();
  static const int kCdnidFieldNumber = 1;
  ::google::protobuf::int32 cdnid() const;
  void set_cdnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront.AssignCDNRep)
 private:
  void set_has_cdnid();
  void clear_has_cdnid();
  void set_has_requested_url();
  void clear_has_requested_url();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr requested_url_;
  ::google::protobuf::int32 cdnid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront_AddMirror : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront.AddMirror) */ {
 public:
  Transport_proto_CBodyFront_AddMirror();
  virtual ~Transport_proto_CBodyFront_AddMirror();

  Transport_proto_CBodyFront_AddMirror(const Transport_proto_CBodyFront_AddMirror& from);

  inline Transport_proto_CBodyFront_AddMirror& operator=(const Transport_proto_CBodyFront_AddMirror& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront_AddMirror(Transport_proto_CBodyFront_AddMirror&& from) noexcept
    : Transport_proto_CBodyFront_AddMirror() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront_AddMirror& operator=(Transport_proto_CBodyFront_AddMirror&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront_AddMirror& default_instance();

  static inline const Transport_proto_CBodyFront_AddMirror* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront_AddMirror*>(
               &_Transport_proto_CBodyFront_AddMirror_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Transport_proto_CBodyFront_AddMirror* other);
  friend void swap(Transport_proto_CBodyFront_AddMirror& a, Transport_proto_CBodyFront_AddMirror& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront_AddMirror* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront_AddMirror* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront_AddMirror& from);
  void MergeFrom(const Transport_proto_CBodyFront_AddMirror& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront_AddMirror* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Domain = 1;
  bool has_domain() const;
  void clear_domain();
  static const int kDomainFieldNumber = 1;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // required string En_IP = 2;
  bool has_en_ip() const;
  void clear_en_ip();
  static const int kEnIPFieldNumber = 2;
  const ::std::string& en_ip() const;
  void set_en_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_en_ip(::std::string&& value);
  #endif
  void set_en_ip(const char* value);
  void set_en_ip(const char* value, size_t size);
  ::std::string* mutable_en_ip();
  ::std::string* release_en_ip();
  void set_allocated_en_ip(::std::string* en_ip);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront.AddMirror)
 private:
  void set_has_domain();
  void clear_has_domain();
  void set_has_en_ip();
  void clear_has_en_ip();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr en_ip_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront_ReturnManagerIDtoCDN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN) */ {
 public:
  Transport_proto_CBodyFront_ReturnManagerIDtoCDN();
  virtual ~Transport_proto_CBodyFront_ReturnManagerIDtoCDN();

  Transport_proto_CBodyFront_ReturnManagerIDtoCDN(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from);

  inline Transport_proto_CBodyFront_ReturnManagerIDtoCDN& operator=(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront_ReturnManagerIDtoCDN(Transport_proto_CBodyFront_ReturnManagerIDtoCDN&& from) noexcept
    : Transport_proto_CBodyFront_ReturnManagerIDtoCDN() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront_ReturnManagerIDtoCDN& operator=(Transport_proto_CBodyFront_ReturnManagerIDtoCDN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& default_instance();

  static inline const Transport_proto_CBodyFront_ReturnManagerIDtoCDN* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront_ReturnManagerIDtoCDN*>(
               &_Transport_proto_CBodyFront_ReturnManagerIDtoCDN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Transport_proto_CBodyFront_ReturnManagerIDtoCDN* other);
  friend void swap(Transport_proto_CBodyFront_ReturnManagerIDtoCDN& a, Transport_proto_CBodyFront_ReturnManagerIDtoCDN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront_ReturnManagerIDtoCDN* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront_ReturnManagerIDtoCDN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from);
  void MergeFrom(const Transport_proto_CBodyFront_ReturnManagerIDtoCDN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront_ReturnManagerIDtoCDN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 managerid = 1;
  bool has_managerid() const;
  void clear_managerid();
  static const int kManageridFieldNumber = 1;
  ::google::protobuf::int32 managerid() const;
  void set_managerid(::google::protobuf::int32 value);

  // required int32 cdnid = 2;
  bool has_cdnid() const;
  void clear_cdnid();
  static const int kCdnidFieldNumber = 2;
  ::google::protobuf::int32 cdnid() const;
  void set_cdnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN)
 private:
  void set_has_managerid();
  void clear_has_managerid();
  void set_has_cdnid();
  void clear_has_cdnid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 managerid_;
  ::google::protobuf::int32 cdnid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyFront : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyFront) */ {
 public:
  Transport_proto_CBodyFront();
  virtual ~Transport_proto_CBodyFront();

  Transport_proto_CBodyFront(const Transport_proto_CBodyFront& from);

  inline Transport_proto_CBodyFront& operator=(const Transport_proto_CBodyFront& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyFront(Transport_proto_CBodyFront&& from) noexcept
    : Transport_proto_CBodyFront() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyFront& operator=(Transport_proto_CBodyFront&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyFront& default_instance();

  static inline const Transport_proto_CBodyFront* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyFront*>(
               &_Transport_proto_CBodyFront_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Transport_proto_CBodyFront* other);
  friend void swap(Transport_proto_CBodyFront& a, Transport_proto_CBodyFront& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyFront* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyFront* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyFront& from);
  void MergeFrom(const Transport_proto_CBodyFront& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyFront* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Transport_proto_CBodyFront_GetCDN GetCDN;
  typedef Transport_proto_CBodyFront_AssignCDN AssignCDN;
  typedef Transport_proto_CBodyFront_AssignCDNRep AssignCDNRep;
  typedef Transport_proto_CBodyFront_AddMirror AddMirror;
  typedef Transport_proto_CBodyFront_ReturnManagerIDtoCDN ReturnManagerIDtoCDN;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyFront)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyCDN_AssignCDNRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp) */ {
 public:
  Transport_proto_CBodyCDN_AssignCDNRsp();
  virtual ~Transport_proto_CBodyCDN_AssignCDNRsp();

  Transport_proto_CBodyCDN_AssignCDNRsp(const Transport_proto_CBodyCDN_AssignCDNRsp& from);

  inline Transport_proto_CBodyCDN_AssignCDNRsp& operator=(const Transport_proto_CBodyCDN_AssignCDNRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyCDN_AssignCDNRsp(Transport_proto_CBodyCDN_AssignCDNRsp&& from) noexcept
    : Transport_proto_CBodyCDN_AssignCDNRsp() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyCDN_AssignCDNRsp& operator=(Transport_proto_CBodyCDN_AssignCDNRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyCDN_AssignCDNRsp& default_instance();

  static inline const Transport_proto_CBodyCDN_AssignCDNRsp* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyCDN_AssignCDNRsp*>(
               &_Transport_proto_CBodyCDN_AssignCDNRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Transport_proto_CBodyCDN_AssignCDNRsp* other);
  friend void swap(Transport_proto_CBodyCDN_AssignCDNRsp& a, Transport_proto_CBodyCDN_AssignCDNRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyCDN_AssignCDNRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyCDN_AssignCDNRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyCDN_AssignCDNRsp& from);
  void MergeFrom(const Transport_proto_CBodyCDN_AssignCDNRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyCDN_AssignCDNRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string CDN_URL = 1;
  bool has_cdn_url() const;
  void clear_cdn_url();
  static const int kCDNURLFieldNumber = 1;
  const ::std::string& cdn_url() const;
  void set_cdn_url(const ::std::string& value);
  #if LANG_CXX11
  void set_cdn_url(::std::string&& value);
  #endif
  void set_cdn_url(const char* value);
  void set_cdn_url(const char* value, size_t size);
  ::std::string* mutable_cdn_url();
  ::std::string* release_cdn_url();
  void set_allocated_cdn_url(::std::string* cdn_url);

  // required string requested_url = 2;
  bool has_requested_url() const;
  void clear_requested_url();
  static const int kRequestedUrlFieldNumber = 2;
  const ::std::string& requested_url() const;
  void set_requested_url(const ::std::string& value);
  #if LANG_CXX11
  void set_requested_url(::std::string&& value);
  #endif
  void set_requested_url(const char* value);
  void set_requested_url(const char* value, size_t size);
  ::std::string* mutable_requested_url();
  ::std::string* release_requested_url();
  void set_allocated_requested_url(::std::string* requested_url);

  // required int32 managerid = 3;
  bool has_managerid() const;
  void clear_managerid();
  static const int kManageridFieldNumber = 3;
  ::google::protobuf::int32 managerid() const;
  void set_managerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp)
 private:
  void set_has_cdn_url();
  void clear_has_cdn_url();
  void set_has_requested_url();
  void clear_has_requested_url();
  void set_has_managerid();
  void clear_has_managerid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cdn_url_;
  ::google::protobuf::internal::ArenaStringPtr requested_url_;
  ::google::protobuf::int32 managerid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyCDN_StateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyCDN.StateInfo) */ {
 public:
  Transport_proto_CBodyCDN_StateInfo();
  virtual ~Transport_proto_CBodyCDN_StateInfo();

  Transport_proto_CBodyCDN_StateInfo(const Transport_proto_CBodyCDN_StateInfo& from);

  inline Transport_proto_CBodyCDN_StateInfo& operator=(const Transport_proto_CBodyCDN_StateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyCDN_StateInfo(Transport_proto_CBodyCDN_StateInfo&& from) noexcept
    : Transport_proto_CBodyCDN_StateInfo() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyCDN_StateInfo& operator=(Transport_proto_CBodyCDN_StateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyCDN_StateInfo& default_instance();

  static inline const Transport_proto_CBodyCDN_StateInfo* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyCDN_StateInfo*>(
               &_Transport_proto_CBodyCDN_StateInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Transport_proto_CBodyCDN_StateInfo* other);
  friend void swap(Transport_proto_CBodyCDN_StateInfo& a, Transport_proto_CBodyCDN_StateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyCDN_StateInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyCDN_StateInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyCDN_StateInfo& from);
  void MergeFrom(const Transport_proto_CBodyCDN_StateInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyCDN_StateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 m_ullMaxBand = 1;
  bool has_m_ullmaxband() const;
  void clear_m_ullmaxband();
  static const int kMUllMaxBandFieldNumber = 1;
  ::google::protobuf::int32 m_ullmaxband() const;
  void set_m_ullmaxband(::google::protobuf::int32 value);

  // required int32 m_ullUseBand = 2;
  bool has_m_ulluseband() const;
  void clear_m_ulluseband();
  static const int kMUllUseBandFieldNumber = 2;
  ::google::protobuf::int32 m_ulluseband() const;
  void set_m_ulluseband(::google::protobuf::int32 value);

  // required int32 m_ullDCDNBand = 3;
  bool has_m_ulldcdnband() const;
  void clear_m_ulldcdnband();
  static const int kMUllDCDNBandFieldNumber = 3;
  ::google::protobuf::int32 m_ulldcdnband() const;
  void set_m_ulldcdnband(::google::protobuf::int32 value);

  // required int32 m_ullMaxSpace = 4;
  bool has_m_ullmaxspace() const;
  void clear_m_ullmaxspace();
  static const int kMUllMaxSpaceFieldNumber = 4;
  ::google::protobuf::int32 m_ullmaxspace() const;
  void set_m_ullmaxspace(::google::protobuf::int32 value);

  // required int32 m_ullUseSpace = 5;
  bool has_m_ullusespace() const;
  void clear_m_ullusespace();
  static const int kMUllUseSpaceFieldNumber = 5;
  ::google::protobuf::int32 m_ullusespace() const;
  void set_m_ullusespace(::google::protobuf::int32 value);

  // required int32 m_uiHealthDegree = 6;
  bool has_m_uihealthdegree() const;
  void clear_m_uihealthdegree();
  static const int kMUiHealthDegreeFieldNumber = 6;
  ::google::protobuf::int32 m_uihealthdegree() const;
  void set_m_uihealthdegree(::google::protobuf::int32 value);

  // required int32 m_iLastKeepAliveTime = 7;
  bool has_m_ilastkeepalivetime() const;
  void clear_m_ilastkeepalivetime();
  static const int kMILastKeepAliveTimeFieldNumber = 7;
  ::google::protobuf::int32 m_ilastkeepalivetime() const;
  void set_m_ilastkeepalivetime(::google::protobuf::int32 value);

  // required int32 managerid = 8;
  bool has_managerid() const;
  void clear_managerid();
  static const int kManageridFieldNumber = 8;
  ::google::protobuf::int32 managerid() const;
  void set_managerid(::google::protobuf::int32 value);

  // required int32 cdnid = 9;
  bool has_cdnid() const;
  void clear_cdnid();
  static const int kCdnidFieldNumber = 9;
  ::google::protobuf::int32 cdnid() const;
  void set_cdnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyCDN.StateInfo)
 private:
  void set_has_m_ullmaxband();
  void clear_has_m_ullmaxband();
  void set_has_m_ulluseband();
  void clear_has_m_ulluseband();
  void set_has_m_ulldcdnband();
  void clear_has_m_ulldcdnband();
  void set_has_m_ullmaxspace();
  void clear_has_m_ullmaxspace();
  void set_has_m_ullusespace();
  void clear_has_m_ullusespace();
  void set_has_m_uihealthdegree();
  void clear_has_m_uihealthdegree();
  void set_has_m_ilastkeepalivetime();
  void clear_has_m_ilastkeepalivetime();
  void set_has_managerid();
  void clear_has_managerid();
  void set_has_cdnid();
  void clear_has_cdnid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 m_ullmaxband_;
  ::google::protobuf::int32 m_ulluseband_;
  ::google::protobuf::int32 m_ulldcdnband_;
  ::google::protobuf::int32 m_ullmaxspace_;
  ::google::protobuf::int32 m_ullusespace_;
  ::google::protobuf::int32 m_uihealthdegree_;
  ::google::protobuf::int32 m_ilastkeepalivetime_;
  ::google::protobuf::int32 managerid_;
  ::google::protobuf::int32 cdnid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyCDN_FileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyCDN.FileInfo) */ {
 public:
  Transport_proto_CBodyCDN_FileInfo();
  virtual ~Transport_proto_CBodyCDN_FileInfo();

  Transport_proto_CBodyCDN_FileInfo(const Transport_proto_CBodyCDN_FileInfo& from);

  inline Transport_proto_CBodyCDN_FileInfo& operator=(const Transport_proto_CBodyCDN_FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyCDN_FileInfo(Transport_proto_CBodyCDN_FileInfo&& from) noexcept
    : Transport_proto_CBodyCDN_FileInfo() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyCDN_FileInfo& operator=(Transport_proto_CBodyCDN_FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyCDN_FileInfo& default_instance();

  static inline const Transport_proto_CBodyCDN_FileInfo* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyCDN_FileInfo*>(
               &_Transport_proto_CBodyCDN_FileInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Transport_proto_CBodyCDN_FileInfo* other);
  friend void swap(Transport_proto_CBodyCDN_FileInfo& a, Transport_proto_CBodyCDN_FileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyCDN_FileInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyCDN_FileInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyCDN_FileInfo& from);
  void MergeFrom(const Transport_proto_CBodyCDN_FileInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyCDN_FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string FileinfoRep = 1;
  bool has_fileinforep() const;
  void clear_fileinforep();
  static const int kFileinfoRepFieldNumber = 1;
  const ::std::string& fileinforep() const;
  void set_fileinforep(const ::std::string& value);
  #if LANG_CXX11
  void set_fileinforep(::std::string&& value);
  #endif
  void set_fileinforep(const char* value);
  void set_fileinforep(const char* value, size_t size);
  ::std::string* mutable_fileinforep();
  ::std::string* release_fileinforep();
  void set_allocated_fileinforep(::std::string* fileinforep);

  // required int32 managerid = 2;
  bool has_managerid() const;
  void clear_managerid();
  static const int kManageridFieldNumber = 2;
  ::google::protobuf::int32 managerid() const;
  void set_managerid(::google::protobuf::int32 value);

  // required int32 cdnid = 3;
  bool has_cdnid() const;
  void clear_cdnid();
  static const int kCdnidFieldNumber = 3;
  ::google::protobuf::int32 cdnid() const;
  void set_cdnid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyCDN.FileInfo)
 private:
  void set_has_fileinforep();
  void clear_has_fileinforep();
  void set_has_managerid();
  void clear_has_managerid();
  void set_has_cdnid();
  void clear_has_cdnid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fileinforep_;
  ::google::protobuf::int32 managerid_;
  ::google::protobuf::int32 cdnid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyCDN_CDNReportIP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyCDN.CDNReportIP) */ {
 public:
  Transport_proto_CBodyCDN_CDNReportIP();
  virtual ~Transport_proto_CBodyCDN_CDNReportIP();

  Transport_proto_CBodyCDN_CDNReportIP(const Transport_proto_CBodyCDN_CDNReportIP& from);

  inline Transport_proto_CBodyCDN_CDNReportIP& operator=(const Transport_proto_CBodyCDN_CDNReportIP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyCDN_CDNReportIP(Transport_proto_CBodyCDN_CDNReportIP&& from) noexcept
    : Transport_proto_CBodyCDN_CDNReportIP() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyCDN_CDNReportIP& operator=(Transport_proto_CBodyCDN_CDNReportIP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyCDN_CDNReportIP& default_instance();

  static inline const Transport_proto_CBodyCDN_CDNReportIP* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyCDN_CDNReportIP*>(
               &_Transport_proto_CBodyCDN_CDNReportIP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(Transport_proto_CBodyCDN_CDNReportIP* other);
  friend void swap(Transport_proto_CBodyCDN_CDNReportIP& a, Transport_proto_CBodyCDN_CDNReportIP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyCDN_CDNReportIP* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyCDN_CDNReportIP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyCDN_CDNReportIP& from);
  void MergeFrom(const Transport_proto_CBodyCDN_CDNReportIP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyCDN_CDNReportIP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyCDN.CDNReportIP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyCDN : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyCDN) */ {
 public:
  Transport_proto_CBodyCDN();
  virtual ~Transport_proto_CBodyCDN();

  Transport_proto_CBodyCDN(const Transport_proto_CBodyCDN& from);

  inline Transport_proto_CBodyCDN& operator=(const Transport_proto_CBodyCDN& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyCDN(Transport_proto_CBodyCDN&& from) noexcept
    : Transport_proto_CBodyCDN() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyCDN& operator=(Transport_proto_CBodyCDN&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyCDN& default_instance();

  static inline const Transport_proto_CBodyCDN* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyCDN*>(
               &_Transport_proto_CBodyCDN_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Transport_proto_CBodyCDN* other);
  friend void swap(Transport_proto_CBodyCDN& a, Transport_proto_CBodyCDN& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyCDN* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyCDN* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyCDN& from);
  void MergeFrom(const Transport_proto_CBodyCDN& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyCDN* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Transport_proto_CBodyCDN_AssignCDNRsp AssignCDNRsp;
  typedef Transport_proto_CBodyCDN_StateInfo StateInfo;
  typedef Transport_proto_CBodyCDN_FileInfo FileInfo;
  typedef Transport_proto_CBodyCDN_CDNReportIP CDNReportIP;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyCDN)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_GetCDNRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.GetCDNRsp) */ {
 public:
  Transport_proto_CBodyBack_GetCDNRsp();
  virtual ~Transport_proto_CBodyBack_GetCDNRsp();

  Transport_proto_CBodyBack_GetCDNRsp(const Transport_proto_CBodyBack_GetCDNRsp& from);

  inline Transport_proto_CBodyBack_GetCDNRsp& operator=(const Transport_proto_CBodyBack_GetCDNRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_GetCDNRsp(Transport_proto_CBodyBack_GetCDNRsp&& from) noexcept
    : Transport_proto_CBodyBack_GetCDNRsp() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_GetCDNRsp& operator=(Transport_proto_CBodyBack_GetCDNRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_GetCDNRsp& default_instance();

  static inline const Transport_proto_CBodyBack_GetCDNRsp* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_GetCDNRsp*>(
               &_Transport_proto_CBodyBack_GetCDNRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Transport_proto_CBodyBack_GetCDNRsp* other);
  friend void swap(Transport_proto_CBodyBack_GetCDNRsp& a, Transport_proto_CBodyBack_GetCDNRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_GetCDNRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_GetCDNRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_GetCDNRsp& from);
  void MergeFrom(const Transport_proto_CBodyBack_GetCDNRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_GetCDNRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string requested_url = 1;
  bool has_requested_url() const;
  void clear_requested_url();
  static const int kRequestedUrlFieldNumber = 1;
  const ::std::string& requested_url() const;
  void set_requested_url(const ::std::string& value);
  #if LANG_CXX11
  void set_requested_url(::std::string&& value);
  #endif
  void set_requested_url(const char* value);
  void set_requested_url(const char* value, size_t size);
  ::std::string* mutable_requested_url();
  ::std::string* release_requested_url();
  void set_allocated_requested_url(::std::string* requested_url);

  // required int32 cdnhandler = 2;
  bool has_cdnhandler() const;
  void clear_cdnhandler();
  static const int kCdnhandlerFieldNumber = 2;
  ::google::protobuf::int32 cdnhandler() const;
  void set_cdnhandler(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.GetCDNRsp)
 private:
  void set_has_requested_url();
  void clear_has_requested_url();
  void set_has_cdnhandler();
  void clear_has_cdnhandler();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr requested_url_;
  ::google::protobuf::int32 cdnhandler_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_GetCDNRspAnother : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother) */ {
 public:
  Transport_proto_CBodyBack_GetCDNRspAnother();
  virtual ~Transport_proto_CBodyBack_GetCDNRspAnother();

  Transport_proto_CBodyBack_GetCDNRspAnother(const Transport_proto_CBodyBack_GetCDNRspAnother& from);

  inline Transport_proto_CBodyBack_GetCDNRspAnother& operator=(const Transport_proto_CBodyBack_GetCDNRspAnother& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_GetCDNRspAnother(Transport_proto_CBodyBack_GetCDNRspAnother&& from) noexcept
    : Transport_proto_CBodyBack_GetCDNRspAnother() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_GetCDNRspAnother& operator=(Transport_proto_CBodyBack_GetCDNRspAnother&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_GetCDNRspAnother& default_instance();

  static inline const Transport_proto_CBodyBack_GetCDNRspAnother* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_GetCDNRspAnother*>(
               &_Transport_proto_CBodyBack_GetCDNRspAnother_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Transport_proto_CBodyBack_GetCDNRspAnother* other);
  friend void swap(Transport_proto_CBodyBack_GetCDNRspAnother& a, Transport_proto_CBodyBack_GetCDNRspAnother& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_GetCDNRspAnother* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_GetCDNRspAnother* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_GetCDNRspAnother& from);
  void MergeFrom(const Transport_proto_CBodyBack_GetCDNRspAnother& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_GetCDNRspAnother* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string CDN_URL = 1;
  bool has_cdn_url() const;
  void clear_cdn_url();
  static const int kCDNURLFieldNumber = 1;
  const ::std::string& cdn_url() const;
  void set_cdn_url(const ::std::string& value);
  #if LANG_CXX11
  void set_cdn_url(::std::string&& value);
  #endif
  void set_cdn_url(const char* value);
  void set_cdn_url(const char* value, size_t size);
  ::std::string* mutable_cdn_url();
  ::std::string* release_cdn_url();
  void set_allocated_cdn_url(::std::string* cdn_url);

  // required string UserID = 2;
  bool has_userid() const;
  void clear_userid();
  static const int kUserIDFieldNumber = 2;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother)
 private:
  void set_has_cdn_url();
  void clear_has_cdn_url();
  void set_has_userid();
  void clear_has_userid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cdn_url_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_AddMirrorRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp) */ {
 public:
  Transport_proto_CBodyBack_AddMirrorRsp();
  virtual ~Transport_proto_CBodyBack_AddMirrorRsp();

  Transport_proto_CBodyBack_AddMirrorRsp(const Transport_proto_CBodyBack_AddMirrorRsp& from);

  inline Transport_proto_CBodyBack_AddMirrorRsp& operator=(const Transport_proto_CBodyBack_AddMirrorRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_AddMirrorRsp(Transport_proto_CBodyBack_AddMirrorRsp&& from) noexcept
    : Transport_proto_CBodyBack_AddMirrorRsp() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_AddMirrorRsp& operator=(Transport_proto_CBodyBack_AddMirrorRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_AddMirrorRsp& default_instance();

  static inline const Transport_proto_CBodyBack_AddMirrorRsp* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_AddMirrorRsp*>(
               &_Transport_proto_CBodyBack_AddMirrorRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Transport_proto_CBodyBack_AddMirrorRsp* other);
  friend void swap(Transport_proto_CBodyBack_AddMirrorRsp& a, Transport_proto_CBodyBack_AddMirrorRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_AddMirrorRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_AddMirrorRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_AddMirrorRsp& from);
  void MergeFrom(const Transport_proto_CBodyBack_AddMirrorRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_AddMirrorRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.AddMirrorRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_DelFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.DelFile) */ {
 public:
  Transport_proto_CBodyBack_DelFile();
  virtual ~Transport_proto_CBodyBack_DelFile();

  Transport_proto_CBodyBack_DelFile(const Transport_proto_CBodyBack_DelFile& from);

  inline Transport_proto_CBodyBack_DelFile& operator=(const Transport_proto_CBodyBack_DelFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_DelFile(Transport_proto_CBodyBack_DelFile&& from) noexcept
    : Transport_proto_CBodyBack_DelFile() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_DelFile& operator=(Transport_proto_CBodyBack_DelFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_DelFile& default_instance();

  static inline const Transport_proto_CBodyBack_DelFile* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_DelFile*>(
               &_Transport_proto_CBodyBack_DelFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(Transport_proto_CBodyBack_DelFile* other);
  friend void swap(Transport_proto_CBodyBack_DelFile& a, Transport_proto_CBodyBack_DelFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_DelFile* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_DelFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_DelFile& from);
  void MergeFrom(const Transport_proto_CBodyBack_DelFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_DelFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string DelFilelist = 2;
  bool has_delfilelist() const;
  void clear_delfilelist();
  static const int kDelFilelistFieldNumber = 2;
  const ::std::string& delfilelist() const;
  void set_delfilelist(const ::std::string& value);
  #if LANG_CXX11
  void set_delfilelist(::std::string&& value);
  #endif
  void set_delfilelist(const char* value);
  void set_delfilelist(const char* value, size_t size);
  ::std::string* mutable_delfilelist();
  ::std::string* release_delfilelist();
  void set_allocated_delfilelist(::std::string* delfilelist);

  // required int32 cdnhandler = 1;
  bool has_cdnhandler() const;
  void clear_cdnhandler();
  static const int kCdnhandlerFieldNumber = 1;
  ::google::protobuf::int32 cdnhandler() const;
  void set_cdnhandler(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.DelFile)
 private:
  void set_has_cdnhandler();
  void clear_has_cdnhandler();
  void set_has_delfilelist();
  void clear_has_delfilelist();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr delfilelist_;
  ::google::protobuf::int32 cdnhandler_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_AddFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.AddFile) */ {
 public:
  Transport_proto_CBodyBack_AddFile();
  virtual ~Transport_proto_CBodyBack_AddFile();

  Transport_proto_CBodyBack_AddFile(const Transport_proto_CBodyBack_AddFile& from);

  inline Transport_proto_CBodyBack_AddFile& operator=(const Transport_proto_CBodyBack_AddFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_AddFile(Transport_proto_CBodyBack_AddFile&& from) noexcept
    : Transport_proto_CBodyBack_AddFile() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_AddFile& operator=(Transport_proto_CBodyBack_AddFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_AddFile& default_instance();

  static inline const Transport_proto_CBodyBack_AddFile* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_AddFile*>(
               &_Transport_proto_CBodyBack_AddFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Transport_proto_CBodyBack_AddFile* other);
  friend void swap(Transport_proto_CBodyBack_AddFile& a, Transport_proto_CBodyBack_AddFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_AddFile* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_AddFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_AddFile& from);
  void MergeFrom(const Transport_proto_CBodyBack_AddFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_AddFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string AddFilelist = 2;
  bool has_addfilelist() const;
  void clear_addfilelist();
  static const int kAddFilelistFieldNumber = 2;
  const ::std::string& addfilelist() const;
  void set_addfilelist(const ::std::string& value);
  #if LANG_CXX11
  void set_addfilelist(::std::string&& value);
  #endif
  void set_addfilelist(const char* value);
  void set_addfilelist(const char* value, size_t size);
  ::std::string* mutable_addfilelist();
  ::std::string* release_addfilelist();
  void set_allocated_addfilelist(::std::string* addfilelist);

  // required int32 cdnhandler = 1;
  bool has_cdnhandler() const;
  void clear_cdnhandler();
  static const int kCdnhandlerFieldNumber = 1;
  ::google::protobuf::int32 cdnhandler() const;
  void set_cdnhandler(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.AddFile)
 private:
  void set_has_cdnhandler();
  void clear_has_cdnhandler();
  void set_has_addfilelist();
  void clear_has_addfilelist();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addfilelist_;
  ::google::protobuf::int32 cdnhandler_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack_CDNFindSourceResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult) */ {
 public:
  Transport_proto_CBodyBack_CDNFindSourceResult();
  virtual ~Transport_proto_CBodyBack_CDNFindSourceResult();

  Transport_proto_CBodyBack_CDNFindSourceResult(const Transport_proto_CBodyBack_CDNFindSourceResult& from);

  inline Transport_proto_CBodyBack_CDNFindSourceResult& operator=(const Transport_proto_CBodyBack_CDNFindSourceResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack_CDNFindSourceResult(Transport_proto_CBodyBack_CDNFindSourceResult&& from) noexcept
    : Transport_proto_CBodyBack_CDNFindSourceResult() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack_CDNFindSourceResult& operator=(Transport_proto_CBodyBack_CDNFindSourceResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack_CDNFindSourceResult& default_instance();

  static inline const Transport_proto_CBodyBack_CDNFindSourceResult* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack_CDNFindSourceResult*>(
               &_Transport_proto_CBodyBack_CDNFindSourceResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Transport_proto_CBodyBack_CDNFindSourceResult* other);
  friend void swap(Transport_proto_CBodyBack_CDNFindSourceResult& a, Transport_proto_CBodyBack_CDNFindSourceResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack_CDNFindSourceResult* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack_CDNFindSourceResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack_CDNFindSourceResult& from);
  void MergeFrom(const Transport_proto_CBodyBack_CDNFindSourceResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack_CDNFindSourceResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string redirecturl = 2;
  bool has_redirecturl() const;
  void clear_redirecturl();
  static const int kRedirecturlFieldNumber = 2;
  const ::std::string& redirecturl() const;
  void set_redirecturl(const ::std::string& value);
  #if LANG_CXX11
  void set_redirecturl(::std::string&& value);
  #endif
  void set_redirecturl(const char* value);
  void set_redirecturl(const char* value, size_t size);
  ::std::string* mutable_redirecturl();
  ::std::string* release_redirecturl();
  void set_allocated_redirecturl(::std::string* redirecturl);

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult)
 private:
  void set_has_userid();
  void clear_has_userid();
  void set_has_redirecturl();
  void clear_has_redirecturl();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr redirecturl_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto_CBodyBack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto.CBodyBack) */ {
 public:
  Transport_proto_CBodyBack();
  virtual ~Transport_proto_CBodyBack();

  Transport_proto_CBodyBack(const Transport_proto_CBodyBack& from);

  inline Transport_proto_CBodyBack& operator=(const Transport_proto_CBodyBack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto_CBodyBack(Transport_proto_CBodyBack&& from) noexcept
    : Transport_proto_CBodyBack() {
    *this = ::std::move(from);
  }

  inline Transport_proto_CBodyBack& operator=(Transport_proto_CBodyBack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto_CBodyBack& default_instance();

  static inline const Transport_proto_CBodyBack* internal_default_instance() {
    return reinterpret_cast<const Transport_proto_CBodyBack*>(
               &_Transport_proto_CBodyBack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Transport_proto_CBodyBack* other);
  friend void swap(Transport_proto_CBodyBack& a, Transport_proto_CBodyBack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto_CBodyBack* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto_CBodyBack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto_CBodyBack& from);
  void MergeFrom(const Transport_proto_CBodyBack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto_CBodyBack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Transport_proto_CBodyBack_GetCDNRsp GetCDNRsp;
  typedef Transport_proto_CBodyBack_GetCDNRspAnother GetCDNRspAnother;
  typedef Transport_proto_CBodyBack_AddMirrorRsp AddMirrorRsp;
  typedef Transport_proto_CBodyBack_DelFile DelFile;
  typedef Transport_proto_CBodyBack_AddFile AddFile;
  typedef Transport_proto_CBodyBack_CDNFindSourceResult CDNFindSourceResult;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto.CBodyBack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transport_proto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transport_proto.Transport_proto) */ {
 public:
  Transport_proto();
  virtual ~Transport_proto();

  Transport_proto(const Transport_proto& from);

  inline Transport_proto& operator=(const Transport_proto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transport_proto(Transport_proto&& from) noexcept
    : Transport_proto() {
    *this = ::std::move(from);
  }

  inline Transport_proto& operator=(Transport_proto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transport_proto& default_instance();

  static inline const Transport_proto* internal_default_instance() {
    return reinterpret_cast<const Transport_proto*>(
               &_Transport_proto_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(Transport_proto* other);
  friend void swap(Transport_proto& a, Transport_proto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transport_proto* New() const PROTOBUF_FINAL { return New(NULL); }

  Transport_proto* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transport_proto& from);
  void MergeFrom(const Transport_proto& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transport_proto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Transport_proto_CHead CHead;
  typedef Transport_proto_CBodyFront CBodyFront;
  typedef Transport_proto_CBodyCDN CBodyCDN;
  typedef Transport_proto_CBodyBack CBodyBack;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transport_proto.Transport_proto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_transport_5fproto_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transport_proto_CHead

// required string Version = 1;
inline bool Transport_proto_CHead::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CHead::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CHead::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CHead::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_version();
}
inline const ::std::string& Transport_proto_CHead::version() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.Version)
  return version_.GetNoArena();
}
inline void Transport_proto_CHead::set_version(const ::std::string& value) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.Version)
}
#if LANG_CXX11
inline void Transport_proto_CHead::set_version(::std::string&& value) {
  set_has_version();
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CHead.Version)
}
#endif
inline void Transport_proto_CHead::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CHead.Version)
}
inline void Transport_proto_CHead::set_version(const char* value, size_t size) {
  set_has_version();
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CHead.Version)
}
inline ::std::string* Transport_proto_CHead::mutable_version() {
  set_has_version();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CHead.Version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CHead::release_version() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CHead.Version)
  clear_has_version();
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CHead::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    set_has_version();
  } else {
    clear_has_version();
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CHead.Version)
}

// required string UserType = 2;
inline bool Transport_proto_CHead::has_usertype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CHead::set_has_usertype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CHead::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CHead::clear_usertype() {
  usertype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_usertype();
}
inline const ::std::string& Transport_proto_CHead::usertype() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.UserType)
  return usertype_.GetNoArena();
}
inline void Transport_proto_CHead::set_usertype(const ::std::string& value) {
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.UserType)
}
#if LANG_CXX11
inline void Transport_proto_CHead::set_usertype(::std::string&& value) {
  set_has_usertype();
  usertype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CHead.UserType)
}
#endif
inline void Transport_proto_CHead::set_usertype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CHead.UserType)
}
inline void Transport_proto_CHead::set_usertype(const char* value, size_t size) {
  set_has_usertype();
  usertype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CHead.UserType)
}
inline ::std::string* Transport_proto_CHead::mutable_usertype() {
  set_has_usertype();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CHead.UserType)
  return usertype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CHead::release_usertype() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CHead.UserType)
  clear_has_usertype();
  return usertype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CHead::set_allocated_usertype(::std::string* usertype) {
  if (usertype != NULL) {
    set_has_usertype();
  } else {
    clear_has_usertype();
  }
  usertype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), usertype);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CHead.UserType)
}

// required string CmdType = 3;
inline bool Transport_proto_CHead::has_cmdtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_proto_CHead::set_has_cmdtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transport_proto_CHead::clear_has_cmdtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transport_proto_CHead::clear_cmdtype() {
  cmdtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmdtype();
}
inline const ::std::string& Transport_proto_CHead::cmdtype() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.CmdType)
  return cmdtype_.GetNoArena();
}
inline void Transport_proto_CHead::set_cmdtype(const ::std::string& value) {
  set_has_cmdtype();
  cmdtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.CmdType)
}
#if LANG_CXX11
inline void Transport_proto_CHead::set_cmdtype(::std::string&& value) {
  set_has_cmdtype();
  cmdtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CHead.CmdType)
}
#endif
inline void Transport_proto_CHead::set_cmdtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmdtype();
  cmdtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CHead.CmdType)
}
inline void Transport_proto_CHead::set_cmdtype(const char* value, size_t size) {
  set_has_cmdtype();
  cmdtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CHead.CmdType)
}
inline ::std::string* Transport_proto_CHead::mutable_cmdtype() {
  set_has_cmdtype();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CHead.CmdType)
  return cmdtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CHead::release_cmdtype() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CHead.CmdType)
  clear_has_cmdtype();
  return cmdtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CHead::set_allocated_cmdtype(::std::string* cmdtype) {
  if (cmdtype != NULL) {
    set_has_cmdtype();
  } else {
    clear_has_cmdtype();
  }
  cmdtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmdtype);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CHead.CmdType)
}

// required string StateID = 4;
inline bool Transport_proto_CHead::has_stateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transport_proto_CHead::set_has_stateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transport_proto_CHead::clear_has_stateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transport_proto_CHead::clear_stateid() {
  stateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stateid();
}
inline const ::std::string& Transport_proto_CHead::stateid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.StateID)
  return stateid_.GetNoArena();
}
inline void Transport_proto_CHead::set_stateid(const ::std::string& value) {
  set_has_stateid();
  stateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.StateID)
}
#if LANG_CXX11
inline void Transport_proto_CHead::set_stateid(::std::string&& value) {
  set_has_stateid();
  stateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CHead.StateID)
}
#endif
inline void Transport_proto_CHead::set_stateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stateid();
  stateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CHead.StateID)
}
inline void Transport_proto_CHead::set_stateid(const char* value, size_t size) {
  set_has_stateid();
  stateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CHead.StateID)
}
inline ::std::string* Transport_proto_CHead::mutable_stateid() {
  set_has_stateid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CHead.StateID)
  return stateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CHead::release_stateid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CHead.StateID)
  clear_has_stateid();
  return stateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CHead::set_allocated_stateid(::std::string* stateid) {
  if (stateid != NULL) {
    set_has_stateid();
  } else {
    clear_has_stateid();
  }
  stateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stateid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CHead.StateID)
}

// required string RspTime = 5;
inline bool Transport_proto_CHead::has_rsptime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transport_proto_CHead::set_has_rsptime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transport_proto_CHead::clear_has_rsptime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transport_proto_CHead::clear_rsptime() {
  rsptime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rsptime();
}
inline const ::std::string& Transport_proto_CHead::rsptime() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CHead.RspTime)
  return rsptime_.GetNoArena();
}
inline void Transport_proto_CHead::set_rsptime(const ::std::string& value) {
  set_has_rsptime();
  rsptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CHead.RspTime)
}
#if LANG_CXX11
inline void Transport_proto_CHead::set_rsptime(::std::string&& value) {
  set_has_rsptime();
  rsptime_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CHead.RspTime)
}
#endif
inline void Transport_proto_CHead::set_rsptime(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rsptime();
  rsptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CHead.RspTime)
}
inline void Transport_proto_CHead::set_rsptime(const char* value, size_t size) {
  set_has_rsptime();
  rsptime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CHead.RspTime)
}
inline ::std::string* Transport_proto_CHead::mutable_rsptime() {
  set_has_rsptime();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CHead.RspTime)
  return rsptime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CHead::release_rsptime() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CHead.RspTime)
  clear_has_rsptime();
  return rsptime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CHead::set_allocated_rsptime(::std::string* rsptime) {
  if (rsptime != NULL) {
    set_has_rsptime();
  } else {
    clear_has_rsptime();
  }
  rsptime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsptime);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CHead.RspTime)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront_GetCDN

// required string User_URL = 1;
inline bool Transport_proto_CBodyFront_GetCDN::has_user_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyFront_GetCDN::set_has_user_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyFront_GetCDN::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyFront_GetCDN::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
inline const ::std::string& Transport_proto_CBodyFront_GetCDN::user_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  return user_url_.GetNoArena();
}
inline void Transport_proto_CBodyFront_GetCDN::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_GetCDN::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
#endif
inline void Transport_proto_CBodyFront_GetCDN::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
inline void Transport_proto_CBodyFront_GetCDN::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}
inline ::std::string* Transport_proto_CBodyFront_GetCDN::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_GetCDN::release_user_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_GetCDN::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.GetCDN.User_URL)
}

// required string UserID = 2;
inline bool Transport_proto_CBodyFront_GetCDN::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyFront_GetCDN::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyFront_GetCDN::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyFront_GetCDN::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& Transport_proto_CBodyFront_GetCDN::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  return userid_.GetNoArena();
}
inline void Transport_proto_CBodyFront_GetCDN::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_GetCDN::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
#endif
inline void Transport_proto_CBodyFront_GetCDN::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
inline void Transport_proto_CBodyFront_GetCDN::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}
inline ::std::string* Transport_proto_CBodyFront_GetCDN::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_GetCDN::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_GetCDN::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.GetCDN.UserID)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront_AssignCDN

// required string method = 1;
inline bool Transport_proto_CBodyFront_AssignCDN::has_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyFront_AssignCDN::set_has_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_has_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& Transport_proto_CBodyFront_AssignCDN::method() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  return method_.GetNoArena();
}
inline void Transport_proto_CBodyFront_AssignCDN::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_AssignCDN::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
#endif
inline void Transport_proto_CBodyFront_AssignCDN::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
inline void Transport_proto_CBodyFront_AssignCDN::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDN::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDN::release_method() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_AssignCDN::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDN.method)
}

// required string User_URL = 2;
inline bool Transport_proto_CBodyFront_AssignCDN::has_user_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyFront_AssignCDN::set_has_user_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_has_user_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_user_url() {
  user_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_user_url();
}
inline const ::std::string& Transport_proto_CBodyFront_AssignCDN::user_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  return user_url_.GetNoArena();
}
inline void Transport_proto_CBodyFront_AssignCDN::set_user_url(const ::std::string& value) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_AssignCDN::set_user_url(::std::string&& value) {
  set_has_user_url();
  user_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
#endif
inline void Transport_proto_CBodyFront_AssignCDN::set_user_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
inline void Transport_proto_CBodyFront_AssignCDN::set_user_url(const char* value, size_t size) {
  set_has_user_url();
  user_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDN::mutable_user_url() {
  set_has_user_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  return user_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDN::release_user_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
  clear_has_user_url();
  return user_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_AssignCDN::set_allocated_user_url(::std::string* user_url) {
  if (user_url != NULL) {
    set_has_user_url();
  } else {
    clear_has_user_url();
  }
  user_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDN.User_URL)
}

// required int32 managerid = 3;
inline bool Transport_proto_CBodyFront_AssignCDN::has_managerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_proto_CBodyFront_AssignCDN::set_has_managerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transport_proto_CBodyFront_AssignCDN::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyFront_AssignCDN::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDN.managerid)
  return managerid_;
}
inline void Transport_proto_CBodyFront_AssignCDN::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDN.managerid)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront_AssignCDNRep

// required int32 cdnid = 1;
inline bool Transport_proto_CBodyFront_AssignCDNRep::has_cdnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_has_cdnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyFront_AssignCDNRep::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.cdnid)
  return cdnid_;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.cdnid)
}

// required string requested_url = 2;
inline bool Transport_proto_CBodyFront_AssignCDNRep::has_requested_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_has_requested_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyFront_AssignCDNRep::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
inline const ::std::string& Transport_proto_CBodyFront_AssignCDNRep::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  return requested_url_.GetNoArena();
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
#endif
inline void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDNRep::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_AssignCDNRep::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_AssignCDNRep::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AssignCDNRep.requested_url)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront_AddMirror

// required string Domain = 1;
inline bool Transport_proto_CBodyFront_AddMirror::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyFront_AddMirror::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyFront_AddMirror::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyFront_AddMirror::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_domain();
}
inline const ::std::string& Transport_proto_CBodyFront_AddMirror::domain() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  return domain_.GetNoArena();
}
inline void Transport_proto_CBodyFront_AddMirror::set_domain(const ::std::string& value) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_AddMirror::set_domain(::std::string&& value) {
  set_has_domain();
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
#endif
inline void Transport_proto_CBodyFront_AddMirror::set_domain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
inline void Transport_proto_CBodyFront_AddMirror::set_domain(const char* value, size_t size) {
  set_has_domain();
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}
inline ::std::string* Transport_proto_CBodyFront_AddMirror::mutable_domain() {
  set_has_domain();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_AddMirror::release_domain() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
  clear_has_domain();
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_AddMirror::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    set_has_domain();
  } else {
    clear_has_domain();
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AddMirror.Domain)
}

// required string En_IP = 2;
inline bool Transport_proto_CBodyFront_AddMirror::has_en_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyFront_AddMirror::set_has_en_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyFront_AddMirror::clear_has_en_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyFront_AddMirror::clear_en_ip() {
  en_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_en_ip();
}
inline const ::std::string& Transport_proto_CBodyFront_AddMirror::en_ip() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  return en_ip_.GetNoArena();
}
inline void Transport_proto_CBodyFront_AddMirror::set_en_ip(const ::std::string& value) {
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
#if LANG_CXX11
inline void Transport_proto_CBodyFront_AddMirror::set_en_ip(::std::string&& value) {
  set_has_en_ip();
  en_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
#endif
inline void Transport_proto_CBodyFront_AddMirror::set_en_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
inline void Transport_proto_CBodyFront_AddMirror::set_en_ip(const char* value, size_t size) {
  set_has_en_ip();
  en_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}
inline ::std::string* Transport_proto_CBodyFront_AddMirror::mutable_en_ip() {
  set_has_en_ip();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  return en_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyFront_AddMirror::release_en_ip() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
  clear_has_en_ip();
  return en_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyFront_AddMirror::set_allocated_en_ip(::std::string* en_ip) {
  if (en_ip != NULL) {
    set_has_en_ip();
  } else {
    clear_has_en_ip();
  }
  en_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), en_ip);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyFront.AddMirror.En_IP)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront_ReturnManagerIDtoCDN

// required int32 managerid = 1;
inline bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::has_managerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_has_managerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyFront_ReturnManagerIDtoCDN::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.managerid)
  return managerid_;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.managerid)
}

// required int32 cdnid = 2;
inline bool Transport_proto_CBodyFront_ReturnManagerIDtoCDN::has_cdnid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_has_cdnid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyFront_ReturnManagerIDtoCDN::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.cdnid)
  return cdnid_;
}
inline void Transport_proto_CBodyFront_ReturnManagerIDtoCDN::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyFront.ReturnManagerIDtoCDN.cdnid)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyFront

// -------------------------------------------------------------------

// Transport_proto_CBodyCDN_AssignCDNRsp

// required string CDN_URL = 1;
inline bool Transport_proto_CBodyCDN_AssignCDNRsp::has_cdn_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_cdn_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_cdn_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_cdn_url() {
  cdn_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdn_url();
}
inline const ::std::string& Transport_proto_CBodyCDN_AssignCDNRsp::cdn_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  return cdn_url_.GetNoArena();
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const ::std::string& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
#if LANG_CXX11
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(::std::string&& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
#endif
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_cdn_url(const char* value, size_t size) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}
inline ::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::mutable_cdn_url() {
  set_has_cdn_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  return cdn_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::release_cdn_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
  clear_has_cdn_url();
  return cdn_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_allocated_cdn_url(::std::string* cdn_url) {
  if (cdn_url != NULL) {
    set_has_cdn_url();
  } else {
    clear_has_cdn_url();
  }
  cdn_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdn_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.CDN_URL)
}

// required string requested_url = 2;
inline bool Transport_proto_CBodyCDN_AssignCDNRsp::has_requested_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_requested_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
inline const ::std::string& Transport_proto_CBodyCDN_AssignCDNRsp::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  return requested_url_.GetNoArena();
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
#if LANG_CXX11
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
#endif
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}
inline ::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyCDN_AssignCDNRsp::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.requested_url)
}

// required int32 managerid = 3;
inline bool Transport_proto_CBodyCDN_AssignCDNRsp::has_managerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_has_managerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_AssignCDNRsp::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.managerid)
  return managerid_;
}
inline void Transport_proto_CBodyCDN_AssignCDNRsp::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.AssignCDNRsp.managerid)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyCDN_StateInfo

// required int32 m_ullMaxBand = 1;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ullmaxband() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullmaxband() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullmaxband() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ullmaxband() {
  m_ullmaxband_ = 0;
  clear_has_m_ullmaxband();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullmaxband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxBand)
  return m_ullmaxband_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ullmaxband(::google::protobuf::int32 value) {
  set_has_m_ullmaxband();
  m_ullmaxband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxBand)
}

// required int32 m_ullUseBand = 2;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ulluseband() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ulluseband() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ulluseband() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ulluseband() {
  m_ulluseband_ = 0;
  clear_has_m_ulluseband();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ulluseband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseBand)
  return m_ulluseband_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ulluseband(::google::protobuf::int32 value) {
  set_has_m_ulluseband();
  m_ulluseband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseBand)
}

// required int32 m_ullDCDNBand = 3;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ulldcdnband() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ulldcdnband() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ulldcdnband() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ulldcdnband() {
  m_ulldcdnband_ = 0;
  clear_has_m_ulldcdnband();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ulldcdnband() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullDCDNBand)
  return m_ulldcdnband_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ulldcdnband(::google::protobuf::int32 value) {
  set_has_m_ulldcdnband();
  m_ulldcdnband_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullDCDNBand)
}

// required int32 m_ullMaxSpace = 4;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ullmaxspace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullmaxspace() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullmaxspace() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ullmaxspace() {
  m_ullmaxspace_ = 0;
  clear_has_m_ullmaxspace();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullmaxspace() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxSpace)
  return m_ullmaxspace_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ullmaxspace(::google::protobuf::int32 value) {
  set_has_m_ullmaxspace();
  m_ullmaxspace_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullMaxSpace)
}

// required int32 m_ullUseSpace = 5;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ullusespace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ullusespace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ullusespace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ullusespace() {
  m_ullusespace_ = 0;
  clear_has_m_ullusespace();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ullusespace() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseSpace)
  return m_ullusespace_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ullusespace(::google::protobuf::int32 value) {
  set_has_m_ullusespace();
  m_ullusespace_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_ullUseSpace)
}

// required int32 m_uiHealthDegree = 6;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_uihealthdegree() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_uihealthdegree() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_uihealthdegree() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_uihealthdegree() {
  m_uihealthdegree_ = 0;
  clear_has_m_uihealthdegree();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_uihealthdegree() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_uiHealthDegree)
  return m_uihealthdegree_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_uihealthdegree(::google::protobuf::int32 value) {
  set_has_m_uihealthdegree();
  m_uihealthdegree_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_uiHealthDegree)
}

// required int32 m_iLastKeepAliveTime = 7;
inline bool Transport_proto_CBodyCDN_StateInfo::has_m_ilastkeepalivetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_m_ilastkeepalivetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_m_ilastkeepalivetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_m_ilastkeepalivetime() {
  m_ilastkeepalivetime_ = 0;
  clear_has_m_ilastkeepalivetime();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::m_ilastkeepalivetime() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_iLastKeepAliveTime)
  return m_ilastkeepalivetime_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_m_ilastkeepalivetime(::google::protobuf::int32 value) {
  set_has_m_ilastkeepalivetime();
  m_ilastkeepalivetime_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.m_iLastKeepAliveTime)
}

// required int32 managerid = 8;
inline bool Transport_proto_CBodyCDN_StateInfo::has_managerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_managerid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.managerid)
  return managerid_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.managerid)
}

// required int32 cdnid = 9;
inline bool Transport_proto_CBodyCDN_StateInfo::has_cdnid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_has_cdnid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Transport_proto_CBodyCDN_StateInfo::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_StateInfo::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.StateInfo.cdnid)
  return cdnid_;
}
inline void Transport_proto_CBodyCDN_StateInfo::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.StateInfo.cdnid)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyCDN_FileInfo

// required string FileinfoRep = 1;
inline bool Transport_proto_CBodyCDN_FileInfo::has_fileinforep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyCDN_FileInfo::set_has_fileinforep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_has_fileinforep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_fileinforep() {
  fileinforep_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fileinforep();
}
inline const ::std::string& Transport_proto_CBodyCDN_FileInfo::fileinforep() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  return fileinforep_.GetNoArena();
}
inline void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const ::std::string& value) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
#if LANG_CXX11
inline void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(::std::string&& value) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
#endif
inline void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
inline void Transport_proto_CBodyCDN_FileInfo::set_fileinforep(const char* value, size_t size) {
  set_has_fileinforep();
  fileinforep_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}
inline ::std::string* Transport_proto_CBodyCDN_FileInfo::mutable_fileinforep() {
  set_has_fileinforep();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  return fileinforep_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyCDN_FileInfo::release_fileinforep() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
  clear_has_fileinforep();
  return fileinforep_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyCDN_FileInfo::set_allocated_fileinforep(::std::string* fileinforep) {
  if (fileinforep != NULL) {
    set_has_fileinforep();
  } else {
    clear_has_fileinforep();
  }
  fileinforep_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fileinforep);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyCDN.FileInfo.FileinfoRep)
}

// required int32 managerid = 2;
inline bool Transport_proto_CBodyCDN_FileInfo::has_managerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyCDN_FileInfo::set_has_managerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_has_managerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_managerid() {
  managerid_ = 0;
  clear_has_managerid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_FileInfo::managerid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.managerid)
  return managerid_;
}
inline void Transport_proto_CBodyCDN_FileInfo::set_managerid(::google::protobuf::int32 value) {
  set_has_managerid();
  managerid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.managerid)
}

// required int32 cdnid = 3;
inline bool Transport_proto_CBodyCDN_FileInfo::has_cdnid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Transport_proto_CBodyCDN_FileInfo::set_has_cdnid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_has_cdnid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Transport_proto_CBodyCDN_FileInfo::clear_cdnid() {
  cdnid_ = 0;
  clear_has_cdnid();
}
inline ::google::protobuf::int32 Transport_proto_CBodyCDN_FileInfo::cdnid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyCDN.FileInfo.cdnid)
  return cdnid_;
}
inline void Transport_proto_CBodyCDN_FileInfo::set_cdnid(::google::protobuf::int32 value) {
  set_has_cdnid();
  cdnid_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyCDN.FileInfo.cdnid)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyCDN_CDNReportIP

// -------------------------------------------------------------------

// Transport_proto_CBodyCDN

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_GetCDNRsp

// required string requested_url = 1;
inline bool Transport_proto_CBodyBack_GetCDNRsp::has_requested_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_has_requested_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::clear_has_requested_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::clear_requested_url() {
  requested_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_requested_url();
}
inline const ::std::string& Transport_proto_CBodyBack_GetCDNRsp::requested_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  return requested_url_.GetNoArena();
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const ::std::string& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(::std::string&& value) {
  set_has_requested_url();
  requested_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
#endif
inline void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_requested_url(const char* value, size_t size) {
  set_has_requested_url();
  requested_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRsp::mutable_requested_url() {
  set_has_requested_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  return requested_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRsp::release_requested_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
  clear_has_requested_url();
  return requested_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_allocated_requested_url(::std::string* requested_url) {
  if (requested_url != NULL) {
    set_has_requested_url();
  } else {
    clear_has_requested_url();
  }
  requested_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requested_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.requested_url)
}

// required int32 cdnhandler = 2;
inline bool Transport_proto_CBodyBack_GetCDNRsp::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
inline ::google::protobuf::int32 Transport_proto_CBodyBack_GetCDNRsp::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.cdnhandler)
  return cdnhandler_;
}
inline void Transport_proto_CBodyBack_GetCDNRsp::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRsp.cdnhandler)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_GetCDNRspAnother

// required string CDN_URL = 1;
inline bool Transport_proto_CBodyBack_GetCDNRspAnother::has_cdn_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_has_cdn_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::clear_has_cdn_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::clear_cdn_url() {
  cdn_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cdn_url();
}
inline const ::std::string& Transport_proto_CBodyBack_GetCDNRspAnother::cdn_url() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  return cdn_url_.GetNoArena();
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const ::std::string& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(::std::string&& value) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
#endif
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_cdn_url(const char* value, size_t size) {
  set_has_cdn_url();
  cdn_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::mutable_cdn_url() {
  set_has_cdn_url();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  return cdn_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::release_cdn_url() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
  clear_has_cdn_url();
  return cdn_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_allocated_cdn_url(::std::string* cdn_url) {
  if (cdn_url != NULL) {
    set_has_cdn_url();
  } else {
    clear_has_cdn_url();
  }
  cdn_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdn_url);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.CDN_URL)
}

// required string UserID = 2;
inline bool Transport_proto_CBodyBack_GetCDNRspAnother::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& Transport_proto_CBodyBack_GetCDNRspAnother::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  return userid_.GetNoArena();
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
#endif
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_GetCDNRspAnother::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_GetCDNRspAnother::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.GetCDNRspAnother.UserID)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_AddMirrorRsp

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_DelFile

// required int32 cdnhandler = 1;
inline bool Transport_proto_CBodyBack_DelFile::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyBack_DelFile::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyBack_DelFile::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyBack_DelFile::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
inline ::google::protobuf::int32 Transport_proto_CBodyBack_DelFile::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.DelFile.cdnhandler)
  return cdnhandler_;
}
inline void Transport_proto_CBodyBack_DelFile::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.DelFile.cdnhandler)
}

// required string DelFilelist = 2;
inline bool Transport_proto_CBodyBack_DelFile::has_delfilelist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyBack_DelFile::set_has_delfilelist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyBack_DelFile::clear_has_delfilelist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyBack_DelFile::clear_delfilelist() {
  delfilelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_delfilelist();
}
inline const ::std::string& Transport_proto_CBodyBack_DelFile::delfilelist() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  return delfilelist_.GetNoArena();
}
inline void Transport_proto_CBodyBack_DelFile::set_delfilelist(const ::std::string& value) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_DelFile::set_delfilelist(::std::string&& value) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
#endif
inline void Transport_proto_CBodyBack_DelFile::set_delfilelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
inline void Transport_proto_CBodyBack_DelFile::set_delfilelist(const char* value, size_t size) {
  set_has_delfilelist();
  delfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}
inline ::std::string* Transport_proto_CBodyBack_DelFile::mutable_delfilelist() {
  set_has_delfilelist();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  return delfilelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_DelFile::release_delfilelist() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
  clear_has_delfilelist();
  return delfilelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_DelFile::set_allocated_delfilelist(::std::string* delfilelist) {
  if (delfilelist != NULL) {
    set_has_delfilelist();
  } else {
    clear_has_delfilelist();
  }
  delfilelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delfilelist);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.DelFile.DelFilelist)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_AddFile

// required int32 cdnhandler = 1;
inline bool Transport_proto_CBodyBack_AddFile::has_cdnhandler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyBack_AddFile::set_has_cdnhandler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyBack_AddFile::clear_has_cdnhandler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyBack_AddFile::clear_cdnhandler() {
  cdnhandler_ = 0;
  clear_has_cdnhandler();
}
inline ::google::protobuf::int32 Transport_proto_CBodyBack_AddFile::cdnhandler() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.AddFile.cdnhandler)
  return cdnhandler_;
}
inline void Transport_proto_CBodyBack_AddFile::set_cdnhandler(::google::protobuf::int32 value) {
  set_has_cdnhandler();
  cdnhandler_ = value;
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.AddFile.cdnhandler)
}

// required string AddFilelist = 2;
inline bool Transport_proto_CBodyBack_AddFile::has_addfilelist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyBack_AddFile::set_has_addfilelist() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyBack_AddFile::clear_has_addfilelist() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyBack_AddFile::clear_addfilelist() {
  addfilelist_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addfilelist();
}
inline const ::std::string& Transport_proto_CBodyBack_AddFile::addfilelist() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  return addfilelist_.GetNoArena();
}
inline void Transport_proto_CBodyBack_AddFile::set_addfilelist(const ::std::string& value) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_AddFile::set_addfilelist(::std::string&& value) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
#endif
inline void Transport_proto_CBodyBack_AddFile::set_addfilelist(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
inline void Transport_proto_CBodyBack_AddFile::set_addfilelist(const char* value, size_t size) {
  set_has_addfilelist();
  addfilelist_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}
inline ::std::string* Transport_proto_CBodyBack_AddFile::mutable_addfilelist() {
  set_has_addfilelist();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  return addfilelist_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_AddFile::release_addfilelist() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
  clear_has_addfilelist();
  return addfilelist_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_AddFile::set_allocated_addfilelist(::std::string* addfilelist) {
  if (addfilelist != NULL) {
    set_has_addfilelist();
  } else {
    clear_has_addfilelist();
  }
  addfilelist_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addfilelist);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.AddFile.AddFilelist)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyBack_CDNFindSourceResult

// required string userid = 1;
inline bool Transport_proto_CBodyBack_CDNFindSourceResult::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& Transport_proto_CBodyBack_CDNFindSourceResult::userid() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  return userid_.GetNoArena();
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(::std::string&& value) {
  set_has_userid();
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
#endif
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}
inline ::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::release_userid() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.userid)
}

// required string redirecturl = 2;
inline bool Transport_proto_CBodyBack_CDNFindSourceResult::has_redirecturl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_has_redirecturl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::clear_has_redirecturl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::clear_redirecturl() {
  redirecturl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirecturl();
}
inline const ::std::string& Transport_proto_CBodyBack_CDNFindSourceResult::redirecturl() const {
  // @@protoc_insertion_point(field_get:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  return redirecturl_.GetNoArena();
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const ::std::string& value) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
#if LANG_CXX11
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(::std::string&& value) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
#endif
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_redirecturl(const char* value, size_t size) {
  set_has_redirecturl();
  redirecturl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}
inline ::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::mutable_redirecturl() {
  set_has_redirecturl();
  // @@protoc_insertion_point(field_mutable:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  return redirecturl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transport_proto_CBodyBack_CDNFindSourceResult::release_redirecturl() {
  // @@protoc_insertion_point(field_release:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
  clear_has_redirecturl();
  return redirecturl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transport_proto_CBodyBack_CDNFindSourceResult::set_allocated_redirecturl(::std::string* redirecturl) {
  if (redirecturl != NULL) {
    set_has_redirecturl();
  } else {
    clear_has_redirecturl();
  }
  redirecturl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirecturl);
  // @@protoc_insertion_point(field_set_allocated:transport_proto.Transport_proto.CBodyBack.CDNFindSourceResult.redirecturl)
}

// -------------------------------------------------------------------

// Transport_proto_CBodyBack

// -------------------------------------------------------------------

// Transport_proto

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace transport_proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::transport_proto::Transport_proto_CHead_User_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transport_proto::Transport_proto_CHead_User_Type>() {
  return ::transport_proto::Transport_proto_CHead_User_Type_descriptor();
}
template <> struct is_proto_enum< ::transport_proto::Transport_proto_CHead_Cmd_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transport_proto::Transport_proto_CHead_Cmd_Type>() {
  return ::transport_proto::Transport_proto_CHead_Cmd_Type_descriptor();
}
template <> struct is_proto_enum< ::transport_proto::Transport_proto_CHead_State_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::transport_proto::Transport_proto_CHead_State_ID>() {
  return ::transport_proto::Transport_proto_CHead_State_ID_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transport_5fproto_2eproto__INCLUDED
